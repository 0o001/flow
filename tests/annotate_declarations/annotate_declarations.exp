>>> react.js (#changes: 3)
//@flow
import * as React from 'react';

function Component1 (props: { label: string }) {
  return <div>{props.label}</div>;
}

function Component2 (props: { id: number }) {
  return <div>{props.id}</div>;
}

var component: React.Node = <Component1 label={"component"} />

if (("some condition": any)) {
  component = <Component2 id={42} />
}


let x: number | Fbt = '';

if (("condition": any)) {
  x = (<fbt> Hello </fbt>);
} else {
  declare var y: Fbt;
  x = y;
}
x = 1;

let z: React.Node = <Component1 label={"c"} />;
z = <div>Hello</div>;

>>> test.js (#changes: 10)
// @flow

var x: number | string = 42; // number | string
x = "a";

var y = null; // no change
y = 42;

var z: null | number | string = null; // null | number | string
z = 42;
z = "a";

var w: number | boolean = 42; // number | bool, don't take on upper bound
w = true;
function ub(x: string) { }
ub(w);

class A { }
class B extends A { }
class C extends B { }

var x1 = new B(); // no change
x1 = new C();

var x2: B | C = new C(); // C | B
x2 = new B();

var x3; // no change
if (w) {
  x3 = 42;
} else {
  x3 = "hello"
}

var x4: number | string | boolean; // number | string | boolean
if (w) {
  x4 = 42;
} else {
  x4 = "hello"
}
x4 = true;

var x5: number | string | boolean; // number | string | boolean
x5 = true;
if (w) {
  x5 = 42;
} else {
  x5 = "hello"
}
x5;

declare var union: number | string | boolean;

var x6: number | string | boolean = 42; // number | string | boolean
x6 = "a";
x6 = union;

var x7: ?number = 42; // ?number
declare var x7a: ?number;
x7 = x7a;

var x8: number = 42 // no change (already annotated as number)
x8 = "hello";

var x9: number | string = 42;
if (w) {
  x9 = "hello"
}
x9;

function provenance(condition: bool) {
  function foo() { return new (class C { }) };
  function bar() { return new (class C { }) };
  let x: C | C | number;
  if (condition) {
    x = foo();
  } else {
    x = bar();
  }
  x = 42;
}

>>> underconstrained.js (#changes: 8)
//@flow

function arr() {
  let arr: Array<number> = [];
  arr = [1,2,3];
}


function arr_ok() {
  let arr = [];
  arr.push(1);
  arr = [1,2,3];
}

function fn() {
  let fn: ((x: number) => number) = (x: number) => 42;
  function havoc() {
    fn = (y => 42);
  }
}

function fn_completely_unannotated() {
  let fn: ((x: number) => number) = x => 42;
  function havoc() {
    fn = (y => 42);
  }
  fn(52);
}

function undefined() {
  let obj = {
    f() {
      let b: number = this.b; // empty
      b = 42;
    }
  }
}

function reversed() {
  let rts: Array<number> = [];

  function initRts(): void {
    rts = [];
  }

  function getRts(): Array<number> {
    return rts;
  }
}

declare class Set<+T> {
  add<U>(U): Set<T | U>
}

function set_replace() {
  let si: Set<string> = new Set();

  si = new Set<string>();

  (si: Set<number>);
}

function set_add() {
  let si: Set<mixed> = new Set();

  si = si.add(42);
}

function set_app() {
  let si: Set<number> = new Set();

  si = si.add(42);

  (si: Set<number>);
}

>>> Launching report...

Stats:
  Files changed:                            3
  Number of annotations added:             21
  Total size of annotations:               91
  Number of vars with write errors:        21
  Number of possibly renamable vars:       23

Errors:
  Missing annot./normalizer error:          0
  Validation Error:                         0
  Import Error:
    Loc source none:                        0
    Parsing heaps get ast error:            0
    Indeterminate module type:              0
    No matching export:                     0
  Serializer error:                         0
  Unsupported error kind:                   0

Warnings:
  Skipping arrow function:                  0
  Large type added:                         0
  Location unhandled:                       0
  Empty NoUpper:                            0
  Empty SomeKnownUpper:                     2

