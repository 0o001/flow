Error --------------------------------------------------------------------------------------------------- bigint.js:11:5

Cannot assign `x` to `z` because bigint [1] is incompatible with bigint literal `10n` [2]. [incompatible-type]

   bigint.js:11:5
   11| z = x; // error, bigint </: 10n
           ^

References:
   bigint.js:3:8
    3| let y: bigint = 10n;
              ^^^^^^ [1]
   bigint.js:5:8
    5| let z: 10n = 10n;
              ^^^ [2]


Error --------------------------------------------------------------------------------------------------- bigint.js:20:8

Cannot call `BigInt` with `null` bound to `value` because: [incompatible-call]
 - Either null [1] is incompatible with boolean [2].
 - Or null [1] is incompatible with string [3].
 - Or null [1] is incompatible with number [4].
 - Or null [1] is incompatible with bigint [5].
 - Or null [1] is incompatible with interface type [6].
 - Or null [1] is incompatible with read-only array type [7].

   bigint.js:20:8
     20| BigInt(null); // error
                ^^^^ [1]

References:
   <BUILTINS>/core.js:2628:18
   2628|   static (value: boolean | string | number | bigint | interface {} | $ReadOnlyArray<mixed>): bigint;
                          ^^^^^^^ [2]
   <BUILTINS>/core.js:2628:28
   2628|   static (value: boolean | string | number | bigint | interface {} | $ReadOnlyArray<mixed>): bigint;
                                    ^^^^^^ [3]
   <BUILTINS>/core.js:2628:37
   2628|   static (value: boolean | string | number | bigint | interface {} | $ReadOnlyArray<mixed>): bigint;
                                             ^^^^^^ [4]
   <BUILTINS>/core.js:2628:46
   2628|   static (value: boolean | string | number | bigint | interface {} | $ReadOnlyArray<mixed>): bigint;
                                                      ^^^^^^ [5]
   <BUILTINS>/core.js:2628:55
   2628|   static (value: boolean | string | number | bigint | interface {} | $ReadOnlyArray<mixed>): bigint;
                                                               ^^^^^^^^^^^^ [6]
   <BUILTINS>/core.js:2628:70
   2628|   static (value: boolean | string | number | bigint | interface {} | $ReadOnlyArray<mixed>): bigint;
                                                                              ^^^^^^^^^^^^^^^^^^^^^ [7]


Error --------------------------------------------------------------------------------------------------- bigint.js:25:6

Cannot cast `foo` to empty because bigint [1] is incompatible with empty [2]. [incompatible-cast]

   bigint.js:25:6
   25|     (foo : empty); // error
            ^^^

References:
   bigint.js:23:5
   23| if (typeof foo === "bigint") {
           ^^^^^^^^^^^^^^^^^^^^^^^ [1]
   bigint.js:25:12
   25|     (foo : empty); // error
                  ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- bigint.js:37:2

Cannot compare bigint [1] to string [2]. [invalid-compare]

   bigint.js:37:2
   37| (0n > ""); // error
        ^^ [1]

References:
   bigint.js:37:7
   37| (0n > ""); // error
             ^^ [2]


Error --------------------------------------------------------------------------------------------------- bigint.js:40:5

Sketchy null check on bigint [1] which is potentially 0n. Perhaps you meant to check for null or undefined [2]?
[sketchy-null-bigint]

   bigint.js:40:5
   40| if (b) {} // error
           ^

References:
   bigint.js:39:17
   39| declare var b: ?bigint;
                       ^^^^^^ [1]
   bigint.js:39:16
   39| declare var b: ?bigint;
                      ^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- imported.js:5:2

Cannot cast `x` to empty because bigint [1] is incompatible with empty [2]. [incompatible-cast]

   imported.js:5:2
   5| (x : empty); // error
       ^

References:
   exported.js:1:18
   1| export const x = 1n;
                       ^^ [1]
   imported.js:5:6
   5| (x : empty); // error
           ^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- imported.js:8:2

Cannot cast `y` to empty because bigint [1] is incompatible with empty [2]. [incompatible-cast]

   imported.js:8:2
   8| (y : empty); // error
       ^

References:
   exported.js:2:16
   2| export default 2n;
                     ^^ [1]
   imported.js:8:6
   8| (y : empty); // error
           ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:11:2

Cannot cast `z` to empty because bigint [1] is incompatible with empty [2]. [incompatible-cast]

   imported.js:11:2
   11| (z : empty); // error
        ^

References:
   exported.js:3:18
    3| export const z = -1n;
                        ^^^ [1]
   imported.js:11:6
   11| (z : empty); // error
            ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:14:2

Cannot cast `a` to empty because bigint [1] is incompatible with empty [2]. [incompatible-cast]

   imported.js:14:2
   14| (a : empty); // error
        ^

References:
   exported.js:4:18
    4| export const a = ~1n;
                        ^^^ [1]
   imported.js:14:6
   14| (a : empty); // error
            ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- imported.js:17:2

Cannot cast `c` to empty because bigint [1] is incompatible with empty [2]. [incompatible-cast]

   imported.js:17:2
   17| (c : empty); // error
        ^

References:
   exported.js:6:18
    6| export const c = b++;
                        ^^^ [1]
   imported.js:17:6
   17| (c : empty); // error
            ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ object_key.js:5:2

Cannot cast object literal to `T` because property `1` is missing in object literal [1] but exists in `T` [2].
[prop-missing]

   object_key.js:5:2
   5| ({ 1n: "foo" }: T); // error (TODO: non-string literals not supported)
       ^^^^^^^^^^^^^ [1]

References:
   object_key.js:5:17
   5| ({ 1n: "foo" }: T); // error (TODO: non-string literals not supported)
                      ^ [2]


Error ------------------------------------------------------------------------------------------------ object_key.js:5:4

Non-string literal property keys not supported. [unsupported-syntax]

   5| ({ 1n: "foo" }: T); // error (TODO: non-string literals not supported)
         ^^^^^^^^^


Error ------------------------------------------------------------------------------------------------ object_key.js:6:2

Cannot cast object literal to `T` because property `1` is missing in object literal [1] but exists in `T` [2].
[prop-missing]

   object_key.js:6:2
   6| ({ 2n: "foo" }: T); // error
       ^^^^^^^^^^^^^ [1]

References:
   object_key.js:6:17
   6| ({ 2n: "foo" }: T); // error
                      ^ [2]


Error ------------------------------------------------------------------------------------------------ object_key.js:6:4

Non-string literal property keys not supported. [unsupported-syntax]

   6| ({ 2n: "foo" }: T); // error
         ^^^^^^^^^


Error --------------------------------------------------------------------------------------------------- unions.js:5:10

Cannot return `x` because number literal `1` [1] is incompatible with literal union [2]. [incompatible-return]

   unions.js:5:10
   5|   return x; // fast path error
               ^

References:
   unions.js:4:15
   4| function f(x: nums): bigints {
                    ^^^^ [1]
   unions.js:4:22
   4| function f(x: nums): bigints {
                           ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- unions.js:5:10

Cannot return `x` because number literal `2` [1] is incompatible with literal union [2]. [incompatible-return]

   unions.js:5:10
   5|   return x; // fast path error
               ^

References:
   unions.js:4:15
   4| function f(x: nums): bigints {
                    ^^^^ [1]
   unions.js:4:22
   4| function f(x: nums): bigints {
                           ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- unions.js:9:10

Cannot return `x` because bigint literal `1n` [1] is incompatible with literal union [2]. [incompatible-return]

   unions.js:9:10
   9|   return x; // fast path error
               ^

References:
   unions.js:8:15
   8| function g(x: bigints): nums {
                    ^^^^^^^ [1]
   unions.js:8:25
   8| function g(x: bigints): nums {
                              ^^^^ [2]


Error --------------------------------------------------------------------------------------------------- unions.js:9:10

Cannot return `x` because bigint literal `2n` [1] is incompatible with literal union [2]. [incompatible-return]

   unions.js:9:10
   9|   return x; // fast path error
               ^

References:
   unions.js:8:15
   8| function g(x: bigints): nums {
                    ^^^^^^^ [1]
   unions.js:8:25
   8| function g(x: bigints): nums {
                              ^^^^ [2]



Found 18 errors
