Error --------------------------------------------------------------------------------------------------- bigint.js:13:5

Cannot assign `x` to `z` because bigint [1] is incompatible with bigint literal `10n` [2]. [incompatible-type]

   bigint.js:13:5
   13| z = x; // error, bigint </: 10n
           ^

References:
   bigint.js:5:8
    5| let y: bigint = 10n;
              ^^^^^^ [1]
   bigint.js:7:8
    7| let z: 10n = 10n;
              ^^^ [2]


Error --------------------------------------------------------------------------------------------------- bigint.js:21:8

Cannot call `BigInt` with `null` bound to `value` because: [incompatible-call]
 - Either null [1] is incompatible with boolean [2].
 - Or null [1] is incompatible with string [3].
 - Or null [1] is incompatible with number [4].
 - Or null [1] is incompatible with interface type [5].
 - Or null [1] is incompatible with read-only array type [6].

   bigint.js:21:8
     21| BigInt(null); // error
                ^^^^ [1]

References:
   <BUILTINS>/core.js:2596:18
   2596|   static (value: boolean | string | number | interface {} | $ReadOnlyArray<mixed>): bigint;
                          ^^^^^^^ [2]
   <BUILTINS>/core.js:2596:28
   2596|   static (value: boolean | string | number | interface {} | $ReadOnlyArray<mixed>): bigint;
                                    ^^^^^^ [3]
   <BUILTINS>/core.js:2596:37
   2596|   static (value: boolean | string | number | interface {} | $ReadOnlyArray<mixed>): bigint;
                                             ^^^^^^ [4]
   <BUILTINS>/core.js:2596:46
   2596|   static (value: boolean | string | number | interface {} | $ReadOnlyArray<mixed>): bigint;
                                                      ^^^^^^^^^^^^ [5]
   <BUILTINS>/core.js:2596:61
   2596|   static (value: boolean | string | number | interface {} | $ReadOnlyArray<mixed>): bigint;
                                                                     ^^^^^^^^^^^^^^^^^^^^^ [6]


Error --------------------------------------------------------------------------------------------------- bigint.js:26:6

Cannot cast `foo` to empty because bigint [1] is incompatible with empty [2]. [incompatible-cast]

   bigint.js:26:6
   26|     (foo : empty); // error
            ^^^

References:
   bigint.js:24:5
   24| if (typeof foo === "bigint") {
           ^^^^^^^^^^^^^^^^^^^^^^^ [1]
   bigint.js:26:12
   26|     (foo : empty); // error
                  ^^^^^ [2]



Found 3 errors
