Error ----------------------------------------------------------------------------------- component_type_checking.js:3:1

Component syntax is not supported [unsupported-syntax]

       v----------------------
    3| component InlineParams(
    4|   foo: number,
    5|   'special-key' as bar: number,
    6|   baz as qux: number,
    7|   destructured as {a}: {a: number},
    8| ): void {
    9|   (foo: number); // OK
   10|   (foo: string); // ERROR
   11|   (bar: number); // OK
   12|   (bar: string); // ERROR
   13|   (baz: number); // ERROR, baz unbound
   14|   (qux: number); // OK
   15|   (a: number); // OK
   16|   (a: string); // ERROR
   17|   return null; // ERROR
   18| }
       ^


Error ---------------------------------------------------------------------------------- component_type_checking.js:10:4

Cannot cast `foo` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   component_type_checking.js:10:4
   10|   (foo: string); // ERROR
          ^^^

References:
   component_type_checking.js:4:8
    4|   foo: number,
              ^^^^^^ [1]
   component_type_checking.js:10:9
   10|   (foo: string); // ERROR
               ^^^^^^ [2]


Error ---------------------------------------------------------------------------------- component_type_checking.js:12:4

Cannot cast `bar` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   component_type_checking.js:12:4
   12|   (bar: string); // ERROR
          ^^^

References:
   component_type_checking.js:5:25
    5|   'special-key' as bar: number,
                               ^^^^^^ [1]
   component_type_checking.js:12:9
   12|   (bar: string); // ERROR
               ^^^^^^ [2]


Error ---------------------------------------------------------------------------------- component_type_checking.js:13:4

Cannot resolve name `baz`. [cannot-resolve-name]

   13|   (baz: number); // ERROR, baz unbound
          ^^^


Error ---------------------------------------------------------------------------------- component_type_checking.js:16:4

Cannot cast `a` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   component_type_checking.js:16:4
   16|   (a: string); // ERROR
          ^

References:
   component_type_checking.js:7:28
    7|   destructured as {a}: {a: number},
                                  ^^^^^^ [1]
   component_type_checking.js:16:7
   16|   (a: string); // ERROR
             ^^^^^^ [2]


Error --------------------------------------------------------------------------------- component_type_checking.js:17:10

Cannot return `null` because null [1] is incompatible with undefined [2]. [incompatible-return]

   component_type_checking.js:17:10
   17|   return null; // ERROR
                ^^^^ [1]

References:
   component_type_checking.js:8:4
    8| ): void {
          ^^^^ [2]


Error ---------------------------------------------------------------------------------- component_type_checking.js:20:1

Component syntax is not supported [unsupported-syntax]

       v-----------------------------
   20| component InlineWithRestParam(
   21|   foo: number,
   22|   ...rest: {foo: number}
   23| ) {
   24|   (foo: number);
   25|   (rest: {foo: number}); // OK
   26|   (rest: empty); // ERROR
   27| }
       ^


Error ---------------------------------------------------------------------------------- component_type_checking.js:26:4

Cannot cast `rest` to empty because object type [1] is incompatible with empty [2]. [incompatible-cast]

   component_type_checking.js:26:4
   26|   (rest: empty); // ERROR
          ^^^^

References:
   component_type_checking.js:22:12
   22|   ...rest: {foo: number}
                  ^^^^^^^^^^^^^ [1]
   component_type_checking.js:26:10
   26|   (rest: empty); // ERROR
                ^^^^^ [2]


Error ---------------------------------------------------------------------------------- component_type_checking.js:29:1

Component syntax is not supported [unsupported-syntax]

       v------------------
   29| component Defaults(
   30|   foo: number = 3, // OK
   31|   bar: string = 3, // ERROR
   32|   backwardsRef: typeof foo = foo, // ERROR 2x
   33|   destructured as {a = 'str'}: {a?: number}, // ERROR
   34|   destructuredAssigned as {b = 3}: {b?: number},
   35| ) {
   36|   (b: number); // OK!
   37| }
       ^


Error --------------------------------------------------------------------------------- component_type_checking.js:31:17

Cannot assign number to `bar` because number [1] is incompatible with string [2]. [incompatible-type]

   component_type_checking.js:31:17
   31|   bar: string = 3, // ERROR
                       ^ [1]

References:
   component_type_checking.js:31:8
   31|   bar: string = 3, // ERROR
              ^^^^^^ [2]


Error --------------------------------------------------------------------------------- component_type_checking.js:32:24

Cannot resolve name `foo`. [cannot-resolve-name]

   32|   backwardsRef: typeof foo = foo, // ERROR 2x
                              ^^^


Error --------------------------------------------------------------------------------- component_type_checking.js:32:30

Cannot resolve name `foo`. [cannot-resolve-name]

   32|   backwardsRef: typeof foo = foo, // ERROR 2x
                                    ^^^


Error --------------------------------------------------------------------------------- component_type_checking.js:33:24

Cannot assign string to `a` because string [1] is incompatible with number [2]. [incompatible-type]

   component_type_checking.js:33:24
   33|   destructured as {a = 'str'}: {a?: number}, // ERROR
                              ^^^^^ [1]

References:
   component_type_checking.js:33:37
   33|   destructured as {a = 'str'}: {a?: number}, // ERROR
                                           ^^^^^^ [2]


Error ---------------------------------------------------------------------------------- component_type_checking.js:39:1

Component syntax is not supported [unsupported-syntax]

       v-----------------------------------
   39| component ReactNodeDefaultReturn() {
   40|   declare const node: React$Node;
   41|   return node; // OK!
   42| }
       ^


Error --------------------------------------------------------------------------------------------------- import.js:5:39

Cannot create `InlineOnly` element because string [1] is incompatible with number [2] in property `foo`.
[incompatible-type]

   import.js:5:39
   5| const inlineOnlyBad = <InlineOnly foo="" bar={3} />; // Error 2x
                                            ^^ [1]

References:
   signature.js:5:8
   5|   foo: number,
             ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- import.js:5:47

Cannot create `InlineOnly` element because number [1] is incompatible with string [2] in property `bar`.
[incompatible-type]

   import.js:5:47
   5| const inlineOnlyBad = <InlineOnly foo="" bar={3} />; // Error 2x
                                                    ^ [1]

References:
   signature.js:6:8
   6|   bar: string,
             ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- import.js:8:37

Cannot create `InexactRest` element because string [1] is incompatible with number [2] in property `foo`.
[incompatible-type]

   import.js:8:37
    8| const inexactBad = <InexactRest foo="" bar={3} baz={3} />; // ERROR 2x for foo and bar
                                           ^^ [1]

References:
   signature.js:15:8
   15|   foo: number,
              ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- import.js:8:45

Cannot create `InexactRest` element because number [1] is incompatible with string [2] in property `bar`.
[incompatible-type]

   import.js:8:45
    8| const inexactBad = <InexactRest foo="" bar={3} baz={3} />; // ERROR 2x for foo and bar
                                                   ^ [1]

References:
   signature.js:16:18
   16|   ...rest: {bar: string, ...}
                        ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- import.js:11:37

Cannot create `IndexedRest` element because string [1] is incompatible with number [2] in property `foo`.
[incompatible-type]

   import.js:11:37
   11| const indexedBad = <IndexedRest foo="" bar="str" />; // ERROR 2x for foo and bar
                                           ^^ [1]

References:
   signature.js:25:8
   25|   foo: number,
              ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- import.js:11:44

Cannot create `IndexedRest` element because string [1] is incompatible with number [2] in property `bar`.
[incompatible-type]

   import.js:11:44
   11| const indexedBad = <IndexedRest foo="" bar="str" />; // ERROR 2x for foo and bar
                                                  ^^^^^ [1]

References:
   signature.js:26:23
   26|   ...rest: {[string]: number, ...}
                             ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- import.js:14:39

Cannot create `DefaultProps` element because string [1] is incompatible with number [2] in property `foo`.
[incompatible-type]

   import.js:14:39
   14| const defaultsBad = <DefaultProps foo="bad" />; // ERROR
                                             ^^^^^ [1]

References:
   signature.js:35:8
   35|   foo: number = 3,
              ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- import.js:17:28

Cannot create `RenamedParams` element because property `baz` is missing in component config [1] but exists in props [2].
[prop-missing]

   import.js:17:28
   17| const renamedWrongProps = <RenamedParams bar={3} foo="str" baz="str" />; // ERROR 4x, bad foo type, bad bar type, no non-ident, extra baz
                                  ^^^^^^^^^^^^^

References:
   signature.js:43:24
                              v
   43| component RenamedParams(
   44|   foo as bar: number,
   45|   bar as foo: string,
   46|   'non-ident' as baz: string,
   47| ) {}
       ^ [1]
   import.js:17:27
   17| const renamedWrongProps = <RenamedParams bar={3} foo="str" baz="str" />; // ERROR 4x, bad foo type, bad bar type, no non-ident, extra baz
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- import.js:17:28

Cannot create `RenamedParams` element because property `non-ident` is missing in props [1] but exists in component
config [2]. [prop-missing]

   import.js:17:28
   17| const renamedWrongProps = <RenamedParams bar={3} foo="str" baz="str" />; // ERROR 4x, bad foo type, bad bar type, no non-ident, extra baz
                                  ^^^^^^^^^^^^^

References:
   import.js:17:27
   17| const renamedWrongProps = <RenamedParams bar={3} foo="str" baz="str" />; // ERROR 4x, bad foo type, bad bar type, no non-ident, extra baz
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   signature.js:43:24
                              v
   43| component RenamedParams(
   44|   foo as bar: number,
   45|   bar as foo: string,
   46|   'non-ident' as baz: string,
   47| ) {}
       ^ [2]


Error -------------------------------------------------------------------------------------------------- import.js:17:47

Cannot create `RenamedParams` element because number [1] is incompatible with string [2] in property `bar`.
[incompatible-type]

   import.js:17:47
   17| const renamedWrongProps = <RenamedParams bar={3} foo="str" baz="str" />; // ERROR 4x, bad foo type, bad bar type, no non-ident, extra baz
                                                     ^ [1]

References:
   signature.js:45:15
   45|   bar as foo: string,
                     ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- import.js:17:54

Cannot create `RenamedParams` element because string [1] is incompatible with number [2] in property `foo`.
[incompatible-type]

   import.js:17:54
   17| const renamedWrongProps = <RenamedParams bar={3} foo="str" baz="str" />; // ERROR 4x, bad foo type, bad bar type, no non-ident, extra baz
                                                            ^^^^^ [1]

References:
   signature.js:44:15
   44|   foo as bar: number,
                     ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- import.js:21:2

Cannot cast `Foo.displayName` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   import.js:21:2
   21| (Foo.displayName: empty); // error, displayName is a string
        ^^^^^^^^^^^^^^^

References:
   statics.js:5:19
    5| Foo.displayName = 'str'; // OK
                         ^^^^^ [1]
   import.js:21:19
   21| (Foo.displayName: empty); // error, displayName is a string
                         ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- import.js:22:5

Cannot get `Foo.randomProperty` because property `randomProperty` is missing in statics of function [1]. [prop-missing]

   import.js:22:5
   22| Foo.randomProperty; // ERROR!
           ^^^^^^^^^^^^^^

References:
   statics.js:2:1
    2| component Foo() {}
       ^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- names.js:4:1

Component syntax is not supported [unsupported-syntax]

   4| component Foo(a: number, ...props: {a: number}) {} // Error
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- names.js:4:36

Component property `a` [1] is re-declared [2] within a spread [3]. Property names may only be have one definition within
a component [invalid-component-prop]

   names.js:4:36
   4| component Foo(a: number, ...props: {a: number}) {} // Error
                                         ^^^^^^^^^^^ [3]

References:
   names.js:4:15
   4| component Foo(a: number, ...props: {a: number}) {} // Error
                    ^ [1]
   names.js:4:37
   4| component Foo(a: number, ...props: {a: number}) {} // Error
                                          ^ [2]


Error ----------------------------------------------------------------------------------------------------- names.js:8:1

Component syntax is not supported [unsupported-syntax]

   8| component Bar(a: number, ...props: BarT) {}; // Error
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- names.js:8:36

Component property `a` [1] is re-declared [2] within a spread [3]. Property names may only be have one definition within
a component [invalid-component-prop]

   names.js:8:36
   8| component Bar(a: number, ...props: BarT) {}; // Error
                                         ^^^^ [3]

References:
   names.js:8:15
   8| component Bar(a: number, ...props: BarT) {}; // Error
                    ^ [1]
   names.js:7:14
   7| type BarT = {a: string} | {b: string}
                   ^ [2]


Error ---------------------------------------------------------------------------------------------------- names.js:11:1

Component syntax is not supported [unsupported-syntax]

   11| component Baz(a: number, ...props: {[string]: boolean}) {}; // Ok
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- names.js:12:9

Cannot create `Baz` element because boolean [1] is incompatible with number [2] in property `a`. [incompatible-type]

   names.js:12:9
   12| <Baz a={false} />; // Error
               ^^^^^ [1]

References:
   names.js:11:18
   11| component Baz(a: number, ...props: {[string]: boolean}) {}; // Ok
                        ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- names.js:15:1

Component syntax is not supported [unsupported-syntax]

   15| component Qux(a: number, ...props: {[string]: boolean, a: number}) {}; // Error
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------------------- names.js:15:36

Component property `a` [1] is re-declared [2] within a spread [3]. Property names may only be have one definition within
a component [invalid-component-prop]

   names.js:15:36
   15| component Qux(a: number, ...props: {[string]: boolean, a: number}) {}; // Error
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]

References:
   names.js:15:15
   15| component Qux(a: number, ...props: {[string]: boolean, a: number}) {}; // Error
                     ^ [1]
   names.js:15:56
   15| component Qux(a: number, ...props: {[string]: boolean, a: number}) {}; // Error
                                                              ^ [2]


Error ---------------------------------------------------------------------------------------------------- names.js:19:1

Component syntax is not supported [unsupported-syntax]

   19| component RunningOutOfMetasyntaxticVariables(a: number, ...props: {...ROMSVType}) {}; // Error
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------------------- names.js:19:67

Component property `a` [1] is re-declared [2] within a spread [3]. Property names may only be have one definition within
a component [invalid-component-prop]

   names.js:19:67
   19| component RunningOutOfMetasyntaxticVariables(a: number, ...props: {...ROMSVType}) {}; // Error
                                                                         ^^^^^^^^^^^^^^ [3]

References:
   names.js:19:46
   19| component RunningOutOfMetasyntaxticVariables(a: number, ...props: {...ROMSVType}) {}; // Error
                                                    ^ [1]
   names.js:18:22
   18| type ROMSVType = {a: number}
                            ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- names.js:22:1

Component syntax is not supported [unsupported-syntax]

   22| component NoRef(ref: string) {}; // Error
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------------------- names.js:22:17

Component syntax does not support ref properties [1]. Use a `forwardRef`-style component definition instead
[invalid-component-prop]

   22| component NoRef(ref: string) {}; // Error
                       ^^^ [1]


Error ---------------------------------------------------------------------------------------------------- names.js:25:1

Component syntax is not supported [unsupported-syntax]

   25| component NoRefInSpread(...props: {ref: string}) {}; // Error
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------------------- names.js:25:35

Components do not support ref properties [1] within spreads [2] [invalid-component-prop]

   names.js:25:35
   25| component NoRefInSpread(...props: {ref: string}) {}; // Error
                                         ^^^^^^^^^^^^^ [2]

References:
   names.js:25:36
   25| component NoRefInSpread(...props: {ref: string}) {}; // Error
                                          ^^^ [1]


Error -------------------------------------------------------------------------------------- nested_with_function.js:5:3

Component syntax is not supported [unsupported-syntax]

        v------------------------
   5|   component Foo(): string {
   6|     return 'str'; // No error
   7|   }
        ^


Error ------------------------------------------------------------------------------------- nested_with_function.js:11:1

Component syntax is not supported [unsupported-syntax]

       v------------------------
   11| component Foo(): number {
   12|   function f(): string {
   13|     return 'str'; // No error
   14|   }
   15|   return 3;
   16| }
       ^


Error ------------------------------------------------------------------------------------------------- signature.js:4:1

Component syntax is not supported [unsupported-syntax]

      v--------------------
   4| component InlineOnly(
   5|   foo: number,
   6|   bar: string,
   7| ) {
   8|   return null;
   9| }
      ^


Error ----------------------------------------------------------------------------------------------- signature.js:12:39

Cannot create `InlineOnly` element because string [1] is incompatible with number [2] in property `foo`.
[incompatible-type]

   signature.js:12:39
   12| const inlineOnlyBad = <InlineOnly foo="" bar={3} />; // Error 2x
                                             ^^ [1]

References:
   signature.js:5:8
    5|   foo: number,
              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- signature.js:12:47

Cannot create `InlineOnly` element because number [1] is incompatible with string [2] in property `bar`.
[incompatible-type]

   signature.js:12:47
   12| const inlineOnlyBad = <InlineOnly foo="" bar={3} />; // Error 2x
                                                     ^ [1]

References:
   signature.js:6:8
    6|   bar: string,
              ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ signature.js:14:1

Component syntax is not supported [unsupported-syntax]

       v---------------------
   14| component InexactRest(
   15|   foo: number,
   16|   ...rest: {bar: string, ...}
   17| ) {
   18|   return null;
   19| }
       ^


Error ----------------------------------------------------------------------------------------------- signature.js:22:37

Cannot create `InexactRest` element because string [1] is incompatible with number [2] in property `foo`.
[incompatible-type]

   signature.js:22:37
   22| const inexactBad = <InexactRest foo="" bar={3} baz={3} />; // ERROR 2x for foo and bar
                                           ^^ [1]

References:
   signature.js:15:8
   15|   foo: number,
              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- signature.js:22:45

Cannot create `InexactRest` element because number [1] is incompatible with string [2] in property `bar`.
[incompatible-type]

   signature.js:22:45
   22| const inexactBad = <InexactRest foo="" bar={3} baz={3} />; // ERROR 2x for foo and bar
                                                   ^ [1]

References:
   signature.js:16:18
   16|   ...rest: {bar: string, ...}
                        ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ signature.js:24:1

Component syntax is not supported [unsupported-syntax]

       v---------------------
   24| component IndexedRest(
   25|   foo: number,
   26|   ...rest: {[string]: number, ...}
   27| ) {
   28|   return null;
   29| }
       ^


Error ----------------------------------------------------------------------------------------------- signature.js:32:37

Cannot create `IndexedRest` element because string [1] is incompatible with number [2] in property `foo`.
[incompatible-type]

   signature.js:32:37
   32| const indexedBad = <IndexedRest foo="" bar="str" />; // ERROR 2x for foo and bar
                                           ^^ [1]

References:
   signature.js:25:8
   25|   foo: number,
              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- signature.js:32:44

Cannot create `IndexedRest` element because string [1] is incompatible with number [2] in property `bar`.
[incompatible-type]

   signature.js:32:44
   32| const indexedBad = <IndexedRest foo="" bar="str" />; // ERROR 2x for foo and bar
                                                  ^^^^^ [1]

References:
   signature.js:26:23
   26|   ...rest: {[string]: number, ...}
                             ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ signature.js:34:1

Component syntax is not supported [unsupported-syntax]

       v----------------------
   34| component DefaultProps(
   35|   foo: number = 3,
   36| ) {
   37|   return null;
   38| }
       ^


Error ----------------------------------------------------------------------------------------------- signature.js:41:39

Cannot create `DefaultProps` element because string [1] is incompatible with number [2] in property `foo`.
[incompatible-type]

   signature.js:41:39
   41| const defaultsBad = <DefaultProps foo="bad" />; // ERROR
                                             ^^^^^ [1]

References:
   signature.js:35:8
   35|   foo: number = 3,
              ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ signature.js:43:1

Component syntax is not supported [unsupported-syntax]

       v-----------------------
   43| component RenamedParams(
   44|   foo as bar: number,
   45|   bar as foo: string,
   46|   'non-ident' as baz: string,
   47| ) {}
       ---^


Error ----------------------------------------------------------------------------------------------- signature.js:50:28

Cannot create `RenamedParams` element because property `baz` is missing in component RenamedParams [1] but exists in
props [2]. [prop-missing]

   signature.js:50:28
   50| const renamedWrongProps = <RenamedParams bar={3} foo="str" baz="str" />; // ERROR 4x, bad foo type, bad bar type, no non-ident, extra baz
                                  ^^^^^^^^^^^^^

References:
   signature.js:43:1
       v-----------------------
   43| component RenamedParams(
   44|   foo as bar: number,
   45|   bar as foo: string,
   46|   'non-ident' as baz: string,
   47| ) {}
       ^ [1]
   signature.js:50:27
   50| const renamedWrongProps = <RenamedParams bar={3} foo="str" baz="str" />; // ERROR 4x, bad foo type, bad bar type, no non-ident, extra baz
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- signature.js:50:28

Cannot create `RenamedParams` element because property `non-ident` is missing in props [1] but exists in component
RenamedParams [2]. [prop-missing]

   signature.js:50:28
   50| const renamedWrongProps = <RenamedParams bar={3} foo="str" baz="str" />; // ERROR 4x, bad foo type, bad bar type, no non-ident, extra baz
                                  ^^^^^^^^^^^^^

References:
   signature.js:50:27
   50| const renamedWrongProps = <RenamedParams bar={3} foo="str" baz="str" />; // ERROR 4x, bad foo type, bad bar type, no non-ident, extra baz
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   signature.js:43:1
       v-----------------------
   43| component RenamedParams(
   44|   foo as bar: number,
   45|   bar as foo: string,
   46|   'non-ident' as baz: string,
   47| ) {}
       ^ [2]


Error ----------------------------------------------------------------------------------------------- signature.js:50:47

Cannot create `RenamedParams` element because number [1] is incompatible with string [2] in property `bar`.
[incompatible-type]

   signature.js:50:47
   50| const renamedWrongProps = <RenamedParams bar={3} foo="str" baz="str" />; // ERROR 4x, bad foo type, bad bar type, no non-ident, extra baz
                                                     ^ [1]

References:
   signature.js:45:15
   45|   bar as foo: string,
                     ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- signature.js:50:54

Cannot create `RenamedParams` element because string [1] is incompatible with number [2] in property `foo`.
[incompatible-type]

   signature.js:50:54
   50| const renamedWrongProps = <RenamedParams bar={3} foo="str" baz="str" />; // ERROR 4x, bad foo type, bad bar type, no non-ident, extra baz
                                                            ^^^^^ [1]

References:
   signature.js:44:15
   44|   foo as bar: number,
                     ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- statics.js:2:1

Component syntax is not supported [unsupported-syntax]

   2| component Foo() {}
      ^^^^^^^^^^^^^^^^^^


Error -------------------------------------------------------------------------------------------------- statics.js:4:19

Cannot assign `3` to `Foo.displayName` because number [1] is incompatible with string [2]. [incompatible-type]

   statics.js:4:19
     4| Foo.displayName = 3; // ERROR
                          ^ [1]

References:
   <BUILTINS>/react.js:123:18
   123|   displayName?: ?string,
                         ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- statics.js:6:5

Cannot get `Foo.randomProperty` because property `randomProperty` is missing in `React.AbstractComponentStatics` [1].
[prop-missing]

   statics.js:6:5
     6| Foo.randomProperty; // ERROR!
            ^^^^^^^^^^^^^^

References:
   <BUILTINS>/react.js:122:47
                                                      v
   122| declare type React$AbstractComponentStatics = {
   123|   displayName?: ?string,
   124|   // This is only on function components, but trying to access name when
   125|   // displayName is undefined is a common pattern.
   126|   name?: ?string,
   127|   propTypes?: {[string] : any, ...},
   128|   ...
   129| };
        ^ [1]


Error ---------------------------------------------------------------------------------------- strict_by_default.js:5:20

Strict mode function may not have duplicate parameter names

   5|   destructured as {a}: {a: number}, // ERROR
                         ^


Error ----------------------------------------------------------------------------------------------- unsupported.js:4:1

Component syntax is not supported [unsupported-syntax]

   4| component Foo() {} // ERROR
      ^^^^^^^^^^^^^^^^^^



Found 64 errors
