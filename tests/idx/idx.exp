Error ------------------------------------------------------------------------------------------------------ test.js:5:8

Cannot get `obj1.a.b` because property `b` is missing in null or undefined [1]. [incompatible-use]

   test.js:5:8
   5| obj1.a.b.c; // error
             ^

References:
   test.js:4:23
   4| declare var obj1: {a: ?{b: {c: number}}};
                            ^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------ test.js:8:2

Cannot cast `idx(...)` to number because null or undefined [1] is incompatible with number [2]. [incompatible-cast]

   test.js:8:2
   8| (idx(obj1, obj => obj.a.b.c): number); // error: result must be MaybeT
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   test.js:1:121
   1| declare function idx<IdxObject, IdxResult>(object: IdxObject, f: (_: $Facebookism$IdxWrapper<IdxObject>) => IdxResult): ?$Facebookism$IdxUnwrapper<IdxResult>;
                                                                                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   test.js:8:31
   8| (idx(obj1, obj => obj.a.b.c): number); // error: result must be MaybeT
                                    ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ test.js:9:2

Cannot cast `idx(...)` to nullable string because number [1] is incompatible with string [2]. [incompatible-cast]

   test.js:9:2
   9| (idx(obj1, obj => obj.a.b.c): ?string); // error: number ~> string
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   test.js:4:32
   4| declare var obj1: {a: ?{b: {c: number}}};
                                     ^^^^^^ [1]
   test.js:9:32
   9| (idx(obj1, obj => obj.a.b.c): ?string); // error: number ~> string
                                     ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:10:2

Cannot cast `idx(...)` to number because null or undefined [1] is incompatible with number [2]. [incompatible-cast]

   test.js:10:2
   10| (idx(obj1, obj => obj["a"].b.c): number); // error: result must be MaybeT
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   test.js:1:121
    1| declare function idx<IdxObject, IdxResult>(object: IdxObject, f: (_: $Facebookism$IdxWrapper<IdxObject>) => IdxResult): ?$Facebookism$IdxUnwrapper<IdxResult>;
                                                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   test.js:10:34
   10| (idx(obj1, obj => obj["a"].b.c): number); // error: result must be MaybeT
                                        ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:11:22

Cannot get `obj.notAProp` because property `notAProp` is missing in object type [1]. [prop-missing]

   test.js:11:22
   11| idx(obj1, obj => obj.notAProp); // error: prop-missing
                            ^^^^^^^^

References:
   test.js:4:19
    4| declare var obj1: {a: ?{b: {c: number}}};
                         ^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:12:18

Illegal `idx` operation: the callback can only access properties on the callback parameter. [invalid-idx]

   12| idx(obj1, obj => obj.a = null); // error: invalid-idx
                        ^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:15:2

Cannot cast `idx(...)` to number because null or undefined [1] is incompatible with number [2]. [incompatible-cast]

   test.js:15:2
   15| (idx(obj2, obj => obj.a.b.c): number); // error: result must be MaybeT
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   test.js:1:121
    1| declare function idx<IdxObject, IdxResult>(object: IdxObject, f: (_: $Facebookism$IdxWrapper<IdxObject>) => IdxResult): ?$Facebookism$IdxUnwrapper<IdxResult>;
                                                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   test.js:15:31
   15| (idx(obj2, obj => obj.a.b.c): number); // error: result must be MaybeT
                                     ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:18:2

Cannot cast `idx(...)` to number because null or undefined [1] is incompatible with number [2]. [incompatible-cast]

   test.js:18:2
   18| (idx(obj3, obj => obj.a.b.c): number); // error: result must be MaybeT
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   test.js:1:121
    1| declare function idx<IdxObject, IdxResult>(object: IdxObject, f: (_: $Facebookism$IdxWrapper<IdxObject>) => IdxResult): ?$Facebookism$IdxUnwrapper<IdxResult>;
                                                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   test.js:18:31
   18| (idx(obj3, obj => obj.a.b.c): number); // error: result must be MaybeT
                                     ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:25:2

Cannot cast `idx(...)` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:25:2
   25| (idx(ab, _ => _.a): empty); // error
        ^^^^^^^^^^^^^^^^^

References:
   test.js:1:121
    1| declare function idx<IdxObject, IdxResult>(object: IdxObject, f: (_: $Facebookism$IdxWrapper<IdxObject>) => IdxResult): ?$Facebookism$IdxUnwrapper<IdxResult>;
                                                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   test.js:25:21
   25| (idx(ab, _ => _.a): empty); // error
                           ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:25:2

Cannot cast `idx(...)` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:25:2
   25| (idx(ab, _ => _.a): empty); // error
        ^^^^^^^^^^^^^^^^^

References:
   test.js:24:20
   24| declare var ab: {a:string}|{b:number};
                          ^^^^^^ [1]
   test.js:25:21
   25| (idx(ab, _ => _.a): empty); // error
                           ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:25:17

Cannot get `_.a` because property `a` is missing in object type [1]. [prop-missing]

   test.js:25:17
   25| (idx(ab, _ => _.a): empty); // error
                       ^

References:
   test.js:24:28
   24| declare var ab: {a:string}|{b:number};
                                  ^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:26:2

Cannot cast `idx(...)` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:26:2
   26| (idx(ab, _ => _.b): empty); // error
        ^^^^^^^^^^^^^^^^^

References:
   test.js:1:121
    1| declare function idx<IdxObject, IdxResult>(object: IdxObject, f: (_: $Facebookism$IdxWrapper<IdxObject>) => IdxResult): ?$Facebookism$IdxUnwrapper<IdxResult>;
                                                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   test.js:26:21
   26| (idx(ab, _ => _.b): empty); // error
                           ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:26:2

Cannot cast `idx(...)` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:26:2
   26| (idx(ab, _ => _.b): empty); // error
        ^^^^^^^^^^^^^^^^^

References:
   test.js:24:31
   24| declare var ab: {a:string}|{b:number};
                                     ^^^^^^ [1]
   test.js:26:21
   26| (idx(ab, _ => _.b): empty); // error
                           ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:26:17

Cannot get `_.b` because property `b` is missing in object type [1]. [prop-missing]

   test.js:26:17
   26| (idx(ab, _ => _.b): empty); // error
                       ^

References:
   test.js:24:17
   24| declare var ab: {a:string}|{b:number};
                       ^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:27:2

Cannot cast `idx(...)` to empty because null or undefined [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:27:2
   27| (idx(ab, _ => _.c): empty); // error
        ^^^^^^^^^^^^^^^^^

References:
   test.js:1:121
    1| declare function idx<IdxObject, IdxResult>(object: IdxObject, f: (_: $Facebookism$IdxWrapper<IdxObject>) => IdxResult): ?$Facebookism$IdxUnwrapper<IdxResult>;
                                                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   test.js:27:21
   27| (idx(ab, _ => _.c): empty); // error
                           ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:27:17

Cannot get `_.c` because property `c` is missing in object type [1]. [prop-missing]

   test.js:27:17
   27| (idx(ab, _ => _.c): empty); // error
                       ^

References:
   test.js:24:17
   24| declare var ab: {a:string}|{b:number};
                       ^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:27:17

Cannot get `_.c` because property `c` is missing in object type [1]. [prop-missing]

   test.js:27:17
   27| (idx(ab, _ => _.c): empty); // error
                       ^

References:
   test.js:24:28
   24| declare var ab: {a:string}|{b:number};
                                  ^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------------- test.js:34:2

Cannot cast `idx(...)` to number because null or undefined [1] is incompatible with number [2]. [incompatible-cast]

   test.js:34:2
   34| (idx(new Foo1(), o => o.a.b): number); // error: result must be MaybeT
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   test.js:1:121
    1| declare function idx<IdxObject, IdxResult>(object: IdxObject, f: (_: $Facebookism$IdxWrapper<IdxObject>) => IdxResult): ?$Facebookism$IdxUnwrapper<IdxResult>;
                                                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   test.js:34:31
   34| (idx(new Foo1(), o => o.a.b): number); // error: result must be MaybeT
                                     ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:34:2

Cannot cast `idx(...)` to number because null or undefined [1] is incompatible with number [2]. [incompatible-cast]

   test.js:34:2
   34| (idx(new Foo1(), o => o.a.b): number); // error: result must be MaybeT
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   test.js:30:27
   30| class Foo1 { a: ?Foo1; b: ?number; }
                                 ^^^^^^^ [1]
   test.js:34:31
   34| (idx(new Foo1(), o => o.a.b): number); // error: result must be MaybeT
                                     ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:35:22

Illegal `idx` operation: the callback can only access properties on the callback parameter. [invalid-idx]

   35| idx(new Foo1(), o => o.a = null); // error: invalid-idx
                            ^^^


Error ----------------------------------------------------------------------------------------------------- test.js:47:2

Cannot cast `idx(...)` to number because null or undefined [1] is incompatible with number [2]. [incompatible-cast]

   test.js:47:2
   47| (idx(42, n => n): number); // error: result must be MaybeT
        ^^^^^^^^^^^^^^^

References:
   test.js:1:121
    1| declare function idx<IdxObject, IdxResult>(object: IdxObject, f: (_: $Facebookism$IdxWrapper<IdxObject>) => IdxResult): ?$Facebookism$IdxUnwrapper<IdxResult>;
                                                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   test.js:47:19
   47| (idx(42, n => n): number); // error: result must be MaybeT
                         ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- test.js:48:16

Cannot get `n.nope` because property `nope` is missing in `Number` [1]. [prop-missing]

   test.js:48:16
   48| idx(42, n => n.nope); // error: prop-missing
                      ^^^^

References:
   test.js:48:5
   48| idx(42, n => n.nope); // error: prop-missing
           ^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:55:16

Illegal `idx` operation: the callback can only access properties on the callback parameter. [invalid-idx]

   55| idx({}, obj => obj()); // error: invalid-idx
                      ^^^^^



Found 23 errors
