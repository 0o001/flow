Typechecking for cycles...
Error -------------------------------------------------------------------------------------------------------- a.js:14:1

Cannot compute a type for function because its definition includes references to itself [1]. Please add an annotation to
this definition [2] [recursive-definition]

   a.js:14:1
   14| function f_na() {
       ^^^^^^^^^^^^^^^

References:
   a.js:18:10
   18|   return f_na();
                ^^^^ [1]
   a.js:14:16
   14| function f_na() {
                       [2]


Error -------------------------------------------------------------------------------------------------------- a.js:22:7

Cannot assign `null` to `x` because null [1] is incompatible with possibly uninitialized variable [2]. All writes to `x`
must be compatible with the type of its initial assignment [3]. Add an annotation to `x` [2] if a different type is
desired. [incompatible-type]

   a.js:22:7
   22|   x = null;
             ^^^^ [1]

References:
   a.js:25:5
   25| var x;
           ^ [2]
   a.js:27:1
   27| x = x;
       ^ [3]


Error -------------------------------------------------------------------------------------------------------- a.js:27:1

Cannot compute a type for `x` because its definition includes references to itself [1]. Please add an annotation to this
definition [2] [recursive-definition]

   a.js:27:1
   27| x = x;
       ^

References:
   a.js:27:5
   27| x = x;
           ^ [1]
   a.js:25:5
   25| var x;
           ^ [2]


Error -------------------------------------------------------------------------------------------------------- a.js:29:1

The following definitions recursively depend on each other, and Flow cannot compute their types:
 - function [1] depends on other definition [2]
 - function [3] depends on other definition [4]
Please add type annotations to these definitions [5] [6] [definition-cycle]

   a.js:29:1
   29| function odd(x: number) {
       ^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   a.js:33:10
   33|   return even(x - 1)
                ^^^^ [2]
   a.js:36:1
   36| function even(x: number) {
       ^^^^^^^^^^^^^^^^^^^^^^^^ [3]
   a.js:40:10
   40|   return odd(x - 1)
                ^^^ [4]
   a.js:29:24
   29| function odd(x: number) {
                               [5]
   a.js:36:25
   36| function even(x: number) {
                                [6]


Error -------------------------------------------------------------------------------------------------------- a.js:43:1

Cannot compute a type for function because its definition includes references to itself [1]. Please add an annotation to
this definition [recursive-definition]

   a.js:43:1
   43| function is_zero(x: number): boolean %checks {
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   a.js:44:21
   44|   return x === 0 || is_zero(x);
                           ^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------------- a.js:62:7

Cannot compute a type for `math2` because its definition includes references to itself [1],  [2]. Please add an
annotation to these positions [3] [4] [recursive-definition]

   a.js:62:7
   62| const math2 = {
             ^^^^^

References:
   a.js:73:12
   73|     return math2.odd(x - 1)
                  ^^^^^ [1]
   a.js:67:12
   67|     return math2.even(x - 1)
                  ^^^^^ [2]
   a.js:69:20
   69|   even: (x: number) => {
                           [3]
   a.js:63:17
   63|   odd(x: number) {
                        [4]


Error -------------------------------------------------------------------------------------------------------- a.js:77:7

The following definitions recursively depend on each other, and Flow cannot compute their types:
 - `odd_obj` [1] depends on other definition [2]
 - `even_obj` [3] depends on other definition [4]
Please add type annotations to these definitions [5] [6] [7] [definition-cycle]

   a.js:77:7
   77| const odd_obj = {
             ^^^^^^^ [1]

References:
   a.js:83:12
   83|     return even_obj.even(x - 1)
                  ^^^^^^^^ [2]
   a.js:87:7
   87| const even_obj = {
             ^^^^^^^^ [3]
   a.js:92:12
   92|     return odd_obj.odd(x - 1)
                  ^^^^^^^ [4]
   a.js:79:17
   79|   odd(x: number) {
                        [5]
   a.js:78:14
   78|   unrelated() { return 42 },
                     [6]
   a.js:88:22
   88|     even: (x: number) => {
                             [7]



Found 7 errors
Annotating cycles...
>>> a.js (#changes: 9)
//@flow


class TimeOfDay {
  a(other: TimeOfDay): boolean {
    return true
  }
}

function f(): number {
  return f();
}

function f_na(): number {
  if (true) {
    return 42;
  }
  return f_na();
}

function havoc_x() {
  x = null;
}

var x: void;
havoc_x();
x = x;

function odd(x: number): boolean {
  if (x === 0) {
    return false;
  }
  return even(x - 1)
}

function even(x: number): boolean {
  if (x === 0) {
    return true;
  }
  return odd(x - 1)
}

function is_zero(x: number): boolean %checks {
  return x === 0 || is_zero(x);
}

const math1 = {
  odd(x: number): bool {
    if (x === 0) {
      return false;
    }
    return math1.even(x - 1)
  },
  even: (x: number): bool => {
    if (x === 0) {
      return true;
    }
    return math1.odd(x - 1)
  }
}

const math2 = {
  odd(x: number): boolean {
    if (x === 0) {
      return false;
    }
    return math2.even(x - 1)
  },
  even: (x: number): boolean => {
    if (x === 0) {
      return true;
    }
    return math2.odd(x - 1)
  }
}

const odd_obj = {
  unrelated(): number { return 42 },
  odd(x: number): boolean {
    if (x === 0) {
      return false;
    }
    return even_obj.even(x - 1)
  }
}

const even_obj = {
    even: (x: number): boolean => {
    if (x === 0) {
      return true;
    }
    return odd_obj.odd(x - 1)
  }
}

>>> Launching report...

Stats:
  Files changed:                            1
  Number of annotations added:              9
  Total size of annotations:                9
  Number of cycles:                         9
  Number of annotations skipped:            0
  Number of unannotatable cycles:           1

Errors:
  Missing annot./normalizer error:          0
  Validation Error:                         0
  Import Error:
    Loc source none:                        0
    Parsing heaps get ast error:            0
    Indeterminate module type:              0
    No matching export:                     0
  Serializer error:                         0
  Unsupported error kind:                   0

Warnings:
  Skipping arrow function:                  0
  Large type added:                         0
  Location unhandled:                       0
  Empty NoUpper:                            0
  Empty SomeKnownUpper:                     0

