Error -------------------------------------------------------------------------------------------- complex_callee.js:7:6

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   complex_callee.js:7:6
   7|     (x: string); // error
           ^

References:
   complex_callee.js:2:47
   2| declare function f(x: mixed): boolean %checks(typeof x === "number");
                                                    ^^^^^^^^^^^^^^^^^^^^^ [1]
   complex_callee.js:7:9
   7|     (x: string); // error
              ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- complex_callee.js:15:6

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   complex_callee.js:15:6
   15|     (x: string); // error
            ^

References:
   complex_callee.js:2:47
    2| declare function f(x: mixed): boolean %checks(typeof x === "number");
                                                     ^^^^^^^^^^^^^^^^^^^^^ [1]
   complex_callee.js:15:9
   15|     (x: string); // error
               ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- patterns_and_rest.js:2:10

A predicate encoded in return [1] cannot reference pattern parameter `b` [2]. [function-predicate]

   patterns_and_rest.js:2:10
   2|   return typeof b === 'string'; // error b is in pattern
               ^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   patterns_and_rest.js:1:37
   1| function invalid_pattern_object({a: b}: {a: mixed}): boolean %checks {
                                          ^ [2]


Error ---------------------------------------------------------------------------------------- patterns_and_rest.js:6:10

A predicate encoded in return [1] cannot reference pattern parameter `b` [2]. [function-predicate]

   patterns_and_rest.js:6:10
   6|   return typeof b === 'string'; // error b is in pattern
               ^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   patterns_and_rest.js:5:33
   5| function invalid_pattern_array([b]: [mixed]): boolean %checks {
                                      ^ [2]


Error --------------------------------------------------------------------------------------- patterns_and_rest.js:10:10

A predicate encoded in return [1] cannot reference rest parameter `a` [2]. [function-predicate]

   patterns_and_rest.js:10:10
   10|   return typeof a === 'string';  // error a is in rest param
                ^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   patterns_and_rest.js:9:26
    9| function invalid_rest(...a: Array<mixed>): boolean %checks {
                                ^ [2]


Error --------------------------------------------------------------------------------------- patterns_and_rest.js:13:73

A predicate encoded in return [1] cannot reference rest parameter `a` [2]. [function-predicate]

   patterns_and_rest.js:13:73
   13| declare function invalid_rest_decl(...a: Array<mixed>): boolean %checks(typeof a === 'string');  // error a is in rest param
                                                                               ^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   patterns_and_rest.js:13:39
   13| declare function invalid_rest_decl(...a: Array<mixed>): boolean %checks(typeof a === 'string');  // error a is in rest param
                                             ^ [2]


Error --------------------------------------------------------------------------------------- patterns_and_rest.js:16:10

A predicate encoded in return [1] cannot reference pattern parameter `b` [2]. [function-predicate]

   patterns_and_rest.js:16:10
   16|   return typeof b === 'string' && typeof c === 'number'; // error b, c in pattern
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   patterns_and_rest.js:15:40
   15| function invalid_pattern_compound({a: [b]}: {a: [mixed]}, ...c: Array<mixed>): boolean %checks {
                                              ^ [2]


Error --------------------------------------------------------------------------------------- patterns_and_rest.js:16:10

A predicate encoded in return [1] cannot reference rest parameter `c` [2]. [function-predicate]

   patterns_and_rest.js:16:10
   16|   return typeof b === 'string' && typeof c === 'number'; // error b, c in pattern
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   patterns_and_rest.js:15:62
   15| function invalid_pattern_compound({a: [b]}: {a: [mixed]}, ...c: Array<mixed>): boolean %checks {
                                                                    ^ [2]


Error ---------------------------------------------------------------------------------------- patterns_and_rest.js:28:4

Cannot cast `x` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   patterns_and_rest.js:28:4
   28|   (x: number); // error string ~> number
          ^

References:
   patterns_and_rest.js:22:10
   22|   return typeof x === 'string'; // this is okay, pattern/rest does not affect predicate param
                ^^^^^^^^^^^^^^^^^^^^^ [1]
   patterns_and_rest.js:28:7
   28|   (x: number); // error string ~> number
             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- patterns_and_rest.js:33:5

A predicate encoded in return [1] cannot reference pattern parameter `x` [2]. [function-predicate]

   patterns_and_rest.js:33:5
           v------------------------------------------------
   33|     typeof x === 'string' && // error '[x' in pattern
   34|     typeof y === 'string'    // this is okay, pattern/rest does not affect predicate param
           --------------------^ [1]

References:
   patterns_and_rest.js:31:27
   31| function partially_valid({x}: {x: mixed}, y: mixed, ...r: Array<number>): boolean %checks {
                                 ^ [2]


Error ---------------------------------------------------------------------------------------- patterns_and_rest.js:42:4

Cannot cast `a` to string because mixed [1] is incompatible with string [2]. [incompatible-cast]

   patterns_and_rest.js:42:4
   42|   (a: string); // error mixed ~> string because 'a' is not refined
          ^

References:
   patterns_and_rest.js:38:16
   38| declare var a: mixed;
                      ^^^^^ [1]
   patterns_and_rest.js:42:7
   42|   (a: string); // error mixed ~> string because 'a' is not refined
             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- patterns_and_rest.js:43:4

Cannot cast `a` to number because mixed [1] is incompatible with number [2]. [incompatible-cast]

   patterns_and_rest.js:43:4
   43|   (a: number); // error mixed ~> number because 'a' is not refined
          ^

References:
   patterns_and_rest.js:38:16
   38| declare var a: mixed;
                      ^^^^^ [1]
   patterns_and_rest.js:43:7
   43|   (a: number); // error mixed ~> number because 'a' is not refined
             ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- patterns_and_rest.js:45:4

Cannot cast `b` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   patterns_and_rest.js:45:4
   45|   (b: number); // error string ~> number
          ^

References:
   patterns_and_rest.js:34:5
   34|     typeof y === 'string'    // this is okay, pattern/rest does not affect predicate param
           ^^^^^^^^^^^^^^^^^^^^^ [1]
   patterns_and_rest.js:45:7
   45|   (b: number); // error string ~> number
             ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ poly.js:8:6

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   poly.js:8:6
   8|     (x: string); // error
           ^

References:
   poly.js:4:48
   4|   declare function f<V>(x: V): boolean %checks(typeof x === "number");
                                                     ^^^^^^^^^^^^^^^^^^^^^ [1]
   poly.js:8:9
   8|     (x: string); // error
              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- poly.js:13:6

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   poly.js:13:6
   13|     (x: string); // error
            ^

References:
   poly.js:4:48
    4|   declare function f<V>(x: V): boolean %checks(typeof x === "number");
                                                      ^^^^^^^^^^^^^^^^^^^^^ [1]
   poly.js:13:9
   13|     (x: string); // error
               ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- poly.js:23:6

Cannot cast `x` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   poly.js:23:6
   23|     (x: string); // error
            ^

References:
   poly.js:18:48
   18|   declare function f<V>(x: V): boolean %checks(typeof x === "number");
                                                      ^^^^^^^^^^^^^^^^^^^^^ [1]
   poly.js:23:9
   23|     (x: string); // error
               ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- poly.js:43:7

Cannot call `fromMaybe` because `T` [1] is underconstrained by call of `fromMaybe` [2]. Either add explicit type
arguments or cast the expression to your expected type. [underconstrained-implicit-instantiation]

   poly.js:43:7
   43|   if (fromMaybe(x)) { // a single [underconstrained-implicit-instantiation] error
             ^^^^^^^^^

References:
   poly.js:40:30
   40|   declare function fromMaybe<T>(x: mixed, ?{ f: T }): T;
                                    ^ [1]
   poly.js:43:7
   43|   if (fromMaybe(x)) { // a single [underconstrained-implicit-instantiation] error
             ^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- poly.js:56:6

Cannot cast `maybeObj` to object type because null or undefined [1] is incompatible with object type [2].
[incompatible-cast]

   poly.js:56:6
   56|     (maybeObj: {}); // error null or void ~> {}
            ^^^^^^^^

References:
   poly.js:52:25
   52|   declare var maybeObj: ?{};
                               ^^^ [1]
   poly.js:56:16
   56|     (maybeObj: {}); // error null or void ~> {}
                      ^^ [2]



Found 18 errors
