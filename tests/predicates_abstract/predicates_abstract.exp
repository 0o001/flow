Error -------------------------------------------------------------------------------------- sanity-filter-union.js:14:2

Cannot cast `my_filter(...)` to array type because property `v` is missing in `A` [1] but exists in `B` [2] in array
element. [prop-missing]

   sanity-filter-union.js:14:2
   14| (my_filter(ab, (x: A|B|C|D|E): %checks => x.kind === 'A'): Array<B>);    // ERROR
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   sanity-filter-union.js:12:23
   12| declare var ab: Array<A|B|C>;
                             ^ [1]
   sanity-filter-union.js:14:66
   14| (my_filter(ab, (x: A|B|C|D|E): %checks => x.kind === 'A'): Array<B>);    // ERROR
                                                                        ^ [2]


Error -------------------------------------------------------------------------------------- sanity-filter-union.js:14:2

Cannot cast `my_filter(...)` to array type because string literal `A` [1] is incompatible with string literal `B` [2] in
property `kind` of array element. [incompatible-cast]

   sanity-filter-union.js:14:2
   14| (my_filter(ab, (x: A|B|C|D|E): %checks => x.kind === 'A'): Array<B>);    // ERROR
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   sanity-filter-union.js:6:18
    6| type A = { kind: 'A', u: number }
                        ^^^ [1]
   sanity-filter-union.js:7:18
    7| type B = { kind: 'B', v: string }
                        ^^^ [2]


Error -------------------------------------------------------------------------------------- sanity-filter-union.js:15:2

Cannot cast `my_filter(...)` to array type because `B` [1] is incompatible with union type [2] in array element.
[incompatible-cast]

   sanity-filter-union.js:15:2
   15| (my_filter(ab, (x: A|B|C|D|E): %checks => x.kind !== 'A'): Array<A|C>);  // ERROR
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   sanity-filter-union.js:12:25
   12| declare var ab: Array<A|B|C>;
                               ^ [1]
   sanity-filter-union.js:15:66
   15| (my_filter(ab, (x: A|B|C|D|E): %checks => x.kind !== 'A'): Array<A|C>);  // ERROR
                                                                        ^^^ [2]


Error --------------------------------------------------------------------------------------------- sanity-filter.js:6:2

Cannot cast `b` to array type because string [1] is incompatible with number [2] in array element. [incompatible-cast]

   sanity-filter.js:6:2
    6| (b: Array<number>);
        ^

References:
   sanity-filter.js:15:10
   15|   return typeof x === "string";
                ^^^^^^^^^^^^^^^^^^^^^ [1]
   sanity-filter.js:6:11
    6| (b: Array<number>);
                 ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- sanity-filter.js:11:24

function [1]. Function is incompatible with abstract predicate function [2]. [function-predicate]

   sanity-filter.js:11:24
   11| const d = my_filter(c, is_string_regular);
                              ^^^^^^^^^^^^^^^^^

References:
   sanity-filter.js:18:1
   18| function is_string_regular(x: mixed): boolean {
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   sanity-filter.js:1:34
    1| declare function my_filter<T, P: $Pred<1>>(v: Array<T>, cb: P): Array<$Refine<T,P,1>>;
                                        ^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- sanity-filter.js:12:2

Cannot cast `d` to array type because mixed [1] is incompatible with string [2] in array element. [incompatible-cast]

   sanity-filter.js:12:2
   12| (d: Array<string>);
        ^

References:
   sanity-filter.js:10:22
   10| declare var c: Array<mixed>;
                            ^^^^^ [1]
   sanity-filter.js:12:11
   12| (d: Array<string>);
                 ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- sanity-refine.js:2:55

refined type that uses predicate on parameter at position 2 [1]. This is incompatible with function with 1
parameters [2]. [function-predicate]

   sanity-refine.js:2:55
   2| declare function refine<T, P: $Pred<1>>(v: T, cb: P): $Refine<T,P,2>;
                                                            ^^^^^^^^^^^^^^ [1]

References:
   sanity-refine.js:5:19
   5| var b = refine(a, is_string);   // ERROR: index out of bounds
                        ^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- sanity-refine.js:6:2

Cannot cast `b` to string because mixed [1] is incompatible with string [2]. [incompatible-cast]

   sanity-refine.js:6:2
   6| (b: string);
       ^

References:
   sanity-refine.js:4:16
   4| declare var a: mixed;
                     ^^^^^ [1]
   sanity-refine.js:6:5
   6| (b: string);
          ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- sanity-refine.js:17:27

predicate function with 2 arguments [1]. Predicate function is incompatible with predicate function with 3
arguments [2]. [function-predicate]

   sanity-refine.js:17:27
   17| var e2 = refine3(c, d, e, is_string_and_number);
                                 ^^^^^^^^^^^^^^^^^^^^

References:
   sanity-refine.js:20:1
   20| function is_string_and_number(x: mixed, y: mixed): %checks {
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   sanity-refine.js:15:32
   15| declare function refine3<T, P: $Pred<3>>(u: T, v: T, w: T, cb: P): $Refine<T,P,1>;
                                      ^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------- sanity-refine.js:26:20

function [1]. Function is incompatible with abstract predicate function [2]. [function-predicate]

   sanity-refine.js:26:20
   26| var e3 = refine(a, is_string_regular);   // ERROR: is_string_regular is not a
                          ^^^^^^^^^^^^^^^^^

References:
   sanity-refine.js:36:1
   36| function is_string_regular(x: mixed)  {
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   sanity-refine.js:2:31
    2| declare function refine<T, P: $Pred<1>>(v: T, cb: P): $Refine<T,P,2>;
                                     ^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- sanity-refine.js:28:2

Cannot cast `e3` to number because mixed [1] is incompatible with number [2]. [incompatible-cast]

   sanity-refine.js:28:2
   28| (e3: number);
        ^^

References:
   sanity-refine.js:4:16
    4| declare var a: mixed;
                      ^^^^^ [1]
   sanity-refine.js:28:6
   28| (e3: number);
            ^^^^^^ [2]



Found 11 errors
