Error ---------------------------------------------------------------------------------------------------- keyof.js:3:10

The equivalent of TypeScript's `keyof` type operator in Flow is the `$Keys` utility type, used in the form `$Keys<T>`.
[ts-syntax]

   3| type T = keyof O; // ERROR
               ^^^^^^^


Error ---------------------------------------------------------------------------------------------------- never.js:1:10

The closest equivalent of TypeScript's `never` type in Flow is `empty`. [ts-syntax]

   1| type T = never; // ERROR
               ^^^^^


Error ----------------------------------------------------------------------------------------- readonly-variance.js:2:3

While TypeScript uses `readonly` to specify read only properties, Flow uses `+` in the form `type T = {+foo: string}`
for properties, `type T = {+[string]: mixed}` for dictionaries, and `type T = [+foo: string]` for tuple elements.
[ts-syntax]

   2|   readonly foo: string, // ERROR
        ^^^^^^^^


Error --------------------------------------------------------------------------------------- readonly-variance.js:10:15

While TypeScript uses `readonly` to specify read only properties, Flow uses `+` in the form `type T = {+foo: string}`
for properties, `type T = {+[string]: mixed}` for dictionaries, and `type T = [+foo: string]` for tuple elements.
[ts-syntax]

   10| type Tuple = [readonly foo: 1]; // ERROR
                     ^^^^^^^^


Error ---------------------------------------------------------------------------------------- readonly-variance.js:14:3

While TypeScript uses `readonly` to specify read only properties, Flow uses `+` in the form `type T = {+foo: string}`
for properties, `type T = {+[string]: mixed}` for dictionaries, and `type T = [+foo: string]` for tuple elements.
[ts-syntax]

   14|   readonly [string]: mixed; // ERROR
         ^^^^^^^^


Error ---------------------------------------------------------------------------------------- readonly-variance.js:18:3

While TypeScript uses `readonly` to specify read only properties, Flow uses `+` in the form `type T = {+foo: string}`
for properties, `type T = {+[string]: mixed}` for dictionaries, and `type T = [+foo: string]` for tuple elements.
[ts-syntax]

   18|   readonly prop: string; // ERROR
         ^^^^^^^^


Error ---------------------------------------------------------------------------------------- readonly-variance.js:22:3

While TypeScript uses `readonly` to specify read only properties, Flow uses `+` in the form `type T = {+foo: string}`
for properties, `type T = {+[string]: mixed}` for dictionaries, and `type T = [+foo: string]` for tuple elements.
[ts-syntax]

   22|   readonly prop: string; // ERROR
         ^^^^^^^^


Error ---------------------------------------------------------------------------------------- type_param_extends.js:1:8

While TypeScript uses `extends` to specify type parameter bounds, Flow uses `:` in the form `type T<A: B> = ...`.
[ts-syntax]

   1| type A<T extends string> = [T];
             ^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- type_param_extends.js:2:8

While TypeScript uses `extends` to specify type parameter bounds, Flow uses `:` in the form `type T<A: B> = ...`.
[ts-syntax]

   2| type B<+T extends string> = [T];
             ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- type_param_extends.js:3:8

While TypeScript uses `extends` to specify type parameter bounds, Flow uses `:` in the form `type T<A: B> = ...`.
[ts-syntax]

   3| type C<T extends string = "hi"> = [T];
             ^^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------- type_param_extends.js:4:8

While TypeScript uses `extends` to specify type parameter bounds, Flow uses `:` in the form `type T<A: B> = ...`.
[ts-syntax]

   4| type D<+T extends string = "hi"> = [T];
             ^^^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------ undefined.js:1:10

The equivalent of TypeScript's `undefined` type in Flow is `void`. Flow does not have separate `void` and `undefined`
types. [ts-syntax]

   1| type T = undefined; // ERROR
               ^^^^^^^^^


Error -------------------------------------------------------------------------------------------------- unknown.js:1:10

The equivalent of TypeScript's `unknown` type in Flow is `mixed`. [ts-syntax]

   1| type T = unknown; // ERROR
               ^^^^^^^


Error -------------------------------------------------------------------------------------------------- unknown.js:3:10

The equivalent of TypeScript's `unknown` type in Flow is `mixed`. [ts-syntax]

   3| const x: unknown = 1; // ERROR
               ^^^^^^^



Found 14 errors
