Error ---------------------------------------------------------------------------------------------------- arity.js:2:40

Cannot return `x` because tuple type [1] has 2 elements but tuple type [2] has 1 element. [invalid-tuple-arity]

   arity.js:2:40
   2| function foo4(x: [1, 2]): [1] { return x; } // error
                                             ^

References:
   arity.js:2:18
   2| function foo4(x: [1, 2]): [1] { return x; } // error
                       ^^^^^^ [1]
   arity.js:2:27
   2| function foo4(x: [1, 2]): [1] { return x; } // error
                                ^^^ [2]


Error ---------------------------------------------------------------------------------------------------- arity.js:3:40

Cannot return `x` because tuple type [1] has 1 element but tuple type [2] has 2 elements. [invalid-tuple-arity]

   arity.js:3:40
   3| function foo5(x: [1]): [1, 2] { return x; } // error
                                             ^

References:
   arity.js:3:18
   3| function foo5(x: [1]): [1, 2] { return x; } // error
                       ^^^ [1]
   arity.js:3:24
   3| function foo5(x: [1]): [1, 2] { return x; } // error
                             ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- arity.js:7:2

Cannot cast `foo` to tuple type because tuple type [1] has 0 elements but tuple type [2] has 1 element.
[invalid-tuple-arity]

   arity.js:7:2
   7| (foo: [1]); // error
       ^^^

References:
   arity.js:6:12
   6| const foo: [] = [];
                 ^^ [1]
   arity.js:7:7
   7| (foo: [1]); // error
            ^^^ [2]


Error ---------------------------------------------------------------------------------------------------- array.js:2:10

Cannot return `x` because array type [1] has an unknown number of elements, so is incompatible with tuple type [2].
[invalid-tuple-arity]

   array.js:2:10
   2|   return x; // Error, can't enforce arity when flowing array to tuple
               ^

References:
   array.js:1:18
   1| function foo1(x: Array<number>): [number, ?number] {
                       ^^^^^^^^^^^^^ [1]
   array.js:1:34
   1| function foo1(x: Array<number>): [number, ?number] {
                                       ^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- array.js:13:4

Cannot cast `arr` to tuple type because array literal [1] has 3 elements but tuple type [2] has 2 elements.
[invalid-tuple-arity]

   array.js:13:4
   13|   (arr: [1,2]); // error
          ^^^

References:
   array.js:11:15
   11|   const arr = [1,2,3];
                     ^^^^^^^ [1]
   array.js:13:9
   13|   (arr: [1,2]); // error
               ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- array.js:14:4

Cannot cast `arr` to tuple type because array literal [1] has 3 elements but tuple type [2] has 4 elements.
[invalid-tuple-arity]

   array.js:14:4
   14|   (arr: [1,2,3,4]); // error
          ^^^

References:
   array.js:11:15
   11|   const arr = [1,2,3];
                     ^^^^^^^ [1]
   array.js:14:9
   14|   (arr: [1,2,3,4]); // error
               ^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- array.js:21:62

Cannot return `arr` because array type [1] has an unknown number of elements, so is incompatible with tuple type [2].
[invalid-tuple-arity]

   array.js:21:62
   21| function foo3(arr: Array<number>): [number, number] { return arr; } // error
                                                                    ^^^

References:
   array.js:21:20
   21| function foo3(arr: Array<number>): [number, number] { return arr; } // error
                          ^^^^^^^^^^^^^ [1]
   array.js:21:36
   21| function foo3(arr: Array<number>): [number, number] { return arr; } // error
                                          ^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- array.js:24:51

Cannot return `arr` because tuple type [1] is incompatible with array type [2]. [incompatible-return]

   array.js:24:51
   24| function foo4(arr: [1,2]): Array<number> { return arr; } // error
                                                         ^^^

References:
   array.js:24:20
   24| function foo4(arr: [1,2]): Array<number> { return arr; } // error
                          ^^^^^ [1]
   array.js:24:28
   24| function foo4(arr: [1,2]): Array<number> { return arr; } // error
                                  ^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- array.js:30:4

Cannot cast `a` to number literal `10` because number literal `1` [1] is incompatible with number literal `10` [2].
[incompatible-cast]

   array.js:30:4
   30|   (a: 10); // error
          ^

References:
   array.js:28:15
   28|   const tup: [1,2,3,4] = [1,2,3,4];
                     ^ [1]
   array.js:30:7
   30|   (a: 10); // error
             ^^ [2]


Error ---------------------------------------------------------------------------------------------------- array.js:31:4

Cannot cast `b` to number literal `20` because number literal `2` [1] is incompatible with number literal `20` [2].
[incompatible-cast]

   array.js:31:4
   31|   (b: 20); // error
          ^

References:
   array.js:28:17
   28|   const tup: [1,2,3,4] = [1,2,3,4];
                       ^ [1]
   array.js:31:7
   31|   (b: 20); // error
             ^^ [2]


Error ---------------------------------------------------------------------------------------------------- array.js:32:4

Cannot cast `rest` to tuple type because number literal `4` [1] is incompatible with number literal `40` [2] in index 1.
[incompatible-cast]

   array.js:32:4
   32|   (rest: [3,40]); // error
          ^^^^

References:
   array.js:28:21
   28|   const tup: [1,2,3,4] = [1,2,3,4];
                           ^ [1]
   array.js:32:13
   32|   (rest: [3,40]); // error
                   ^^ [2]


Error --------------------------------------------------------------------------------------------------- array.js:38:12

Cannot get `tup[3]` because tuple type [1] only has 2 elements, so index 3 is out of bounds. [invalid-tuple-index]

   array.js:38:12
   38|     return tup[3]; // error
                  ^^^^^^

References:
   array.js:36:21
   36| function foo5(tup: ?[number, number]): number {
                           ^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- labeled.js:5:3

Cannot cast array literal to `A` because boolean [1] is incompatible with string [2] in index 0. [incompatible-cast]

   labeled.js:5:3
   5| ([true, 1]: A); // ERROR
        ^^^^ [1]

References:
   labeled.js:2:16
   2| type A = [foo: string, bar: number];
                     ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- labeled.js:11:8

Cannot cast array literal to `B` because boolean [1] is incompatible with number [2] in index 1. [incompatible-cast]

   labeled.js:11:8
   11| (["s", true]: B); // ERROR
              ^^^^ [1]

References:
   labeled.js:8:24
    8| type B = [string, bar: number];
                              ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- number-index.js:7:1

Cannot assign `123` to `tup[0]` because the index must be statically known to write a tuple element.
[invalid-tuple-index]

   7| tup[(0: number)] = 123; // error
      ^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------------- number-index.js:10:3

Cannot get `x[2]` because tuple type [1] only has 2 elements, so index 2 is out of bounds. [invalid-tuple-index]

   number-index.js:10:3
   10|   x[2]; // error
         ^^^^

References:
   number-index.js:9:17
    9| function foo(x: [1, 2]) {
                       ^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- number-index.js:11:3

Cannot get `x[-1]` because tuple type [1] only has 2 elements, so index -1 is out of bounds. [invalid-tuple-index]

   number-index.js:11:3
   11|   x[-1]; // error
         ^^^^^

References:
   number-index.js:9:17
    9| function foo(x: [1, 2]) {
                       ^^^^^^ [1]


Error -------------------------------------------------------------------------------------------- number-index.js:16:10

Cannot return `x[y]` because number literal `1` [1] is incompatible with string [2]. [incompatible-return]

   number-index.js:16:10
   16|   return x[y]; // error: number ~> string
                ^^^^

References:
   number-index.js:15:18
   15| function bar(x: [1], y: number): string {
                        ^ [1]
   number-index.js:15:34
   15| function bar(x: [1], y: number): string {
                                        ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- optional.js:2:2

Cannot cast array literal to tuple type because array literal [1] has 1 element but tuple type [2] has 2 elements.
[invalid-tuple-arity]

   optional.js:2:2
   2| ([0]: [number, ?string]); // Error, arity is enforced
       ^^^ [1]

References:
   optional.js:2:7
   2| ([0]: [number, ?string]); // Error, arity is enforced
            ^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- optional.js:4:2

Cannot cast array literal to tuple type because empty array literal [1] has 0 elements but tuple type [2] has 2
elements. [invalid-tuple-arity]

   optional.js:4:2
   4| ([]: [?number, string]); // error, since second element is not marked optional
       ^^ [1]

References:
   optional.js:4:6
   4| ([]: [?number, string]); // error, since second element is not marked optional
           ^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- optional.js:6:24

Optional tuple elements are not supported. [unsupported-syntax]

   6| type A = [foo: number, bar?: number]; // ERROR: syntax not supported
                             ^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------ readonly-array.js:16:76

Cannot return `tup` because number [1] is incompatible with string [2] in array element. [incompatible-return]

   readonly-array.js:16:76
   16| const elemCheck = (tup: $ReadOnlyArray<number>): $ReadOnlyArray<string> => tup; // error
                                                                                  ^^^

References:
   readonly-array.js:16:40
   16| const elemCheck = (tup: $ReadOnlyArray<number>): $ReadOnlyArray<string> => tup; // error
                                              ^^^^^^ [1]
   readonly-array.js:16:65
   16| const elemCheck = (tup: $ReadOnlyArray<number>): $ReadOnlyArray<string> => tup; // error
                                                                       ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ readonly-array.js:17:70

Cannot return `tup` because read-only array type [1] is incompatible with array type [2]. [incompatible-return]

   readonly-array.js:17:70
   17| const tupleToArray = (tup: $ReadOnlyArray<number>): Array<number> => tup; // error
                                                                            ^^^

References:
   readonly-array.js:17:28
   17| const tupleToArray = (tup: $ReadOnlyArray<number>): Array<number> => tup; // error
                                  ^^^^^^^^^^^^^^^^^^^^^^ [1]
   readonly-array.js:17:53
   17| const tupleToArray = (tup: $ReadOnlyArray<number>): Array<number> => tup; // error
                                                           ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ readonly-array.js:18:65

Cannot call `tup.push` because property `push` is missing in `$ReadOnlyArray` [1]. [prop-missing]

   readonly-array.js:18:65
   18| const arrayMethods = (tup: $ReadOnlyArray<number>): void => tup.push(123); // error
                                                                       ^^^^

References:
   readonly-array.js:18:28
   18| const arrayMethods = (tup: $ReadOnlyArray<number>): void => tup.push(123); // error
                                  ^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------ readonly-array.js:21:42

Cannot return `x.length` because length `2` (number) of tuple [1] is incompatible with string [2]. [incompatible-return]

   readonly-array.js:21:42
   21| function foo1(x: [1,2]): string { return x.length; } // error
                                                ^^^^^^^^

References:
   readonly-array.js:21:18
   21| function foo1(x: [1,2]): string { return x.length; } // error
                        ^^^^^ [1]
   readonly-array.js:21:26
   21| function foo1(x: [1,2]): string { return x.length; } // error
                                ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ readonly-array.js:26:17

Cannot call `readOnlyRef.push` because property `push` is missing in `$ReadOnlyArray` [1]. [prop-missing]

   readonly-array.js:26:17
    26|     readOnlyRef.push(123); // error
                        ^^^^

References:
   <BUILTINS>/core.js:767:77
   767|     forEach<This>(callbackfn: (this : This, value: T, index: number, array: $ReadOnlyArray<T>) => mixed, thisArg: This): void;
                                                                                    ^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- readonly-array.js:27:6

Cannot cast `readOnlyRef[0]` to number literal `1` because number literal `2` [1] is incompatible with number literal
`1` [2]. [incompatible-cast]

   readonly-array.js:27:6
   27|     (readOnlyRef[0]: 1); // error
            ^^^^^^^^^^^^^^

References:
   readonly-array.js:24:23
   24| function foo2(tup: [1,2], arr: Array<number>): void {
                             ^ [1]
   readonly-array.js:27:22
   27|     (readOnlyRef[0]: 1); // error
                            ^ [2]


Error ------------------------------------------------------------------------------------------ readonly-array.js:36:44

Cannot call `x.unshift` because property `unshift` is missing in `$ReadOnlyArray` [1]. [prop-missing]

   readonly-array.js:36:44
   36| function foo3(x: [1,2]): number { return x.unshift(); } // error
                                                  ^^^^^^^

References:
   readonly-array.js:36:18
   36| function foo3(x: [1,2]): number { return x.unshift(); } // error
                        ^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- spread.js:3:11

Tuple spread is not supported. [unsupported-syntax]

   3| type A = [...S]; // ERROR: syntax not supported
                ^^^^


Error --------------------------------------------------------------------------------------------------- spread.js:4:11

Tuple spread is not supported. [unsupported-syntax]

   4| type B = [...foo: S]; // ERROR: syntax not supported
                ^^^^^^^^^


Error --------------------------------------------------------------------------------------------------- too-few.js:5:5

Cannot call `foo` with array literal bound to `a` because array literal [1] has 1 element but tuple type [2] has 2
elements. [invalid-tuple-arity]

   too-few.js:5:5
   5| foo([ {} ]); // error, too few elements in array passed to a tuple
          ^^^^^^ [1]

References:
   too-few.js:3:17
   3| function foo(a: [Object, Object]) {}
                      ^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ tuple-map.js:3:10

Cannot return `arr` because string [1] is incompatible with number literal `1` [2] in index 0. [incompatible-return]

   tuple-map.js:3:10
   3|   return arr; // error
               ^^^

References:
   tuple-map.js:2:58
   2| function foo1(arr: $TupleMap<[number, number], number => string>): [1, 2] {
                                                               ^^^^^^ [1]
   tuple-map.js:2:69
   2| function foo1(arr: $TupleMap<[number, number], number => string>): [1, 2] {
                                                                          ^ [2]


Error ------------------------------------------------------------------------------------------------ tuple-map.js:3:10

Cannot return `arr` because string [1] is incompatible with number literal `2` [2] in index 1. [incompatible-return]

   tuple-map.js:3:10
   3|   return arr; // error
               ^^^

References:
   tuple-map.js:2:58
   2| function foo1(arr: $TupleMap<[number, number], number => string>): [1, 2] {
                                                               ^^^^^^ [1]
   tuple-map.js:2:72
   2| function foo1(arr: $TupleMap<[number, number], number => string>): [1, 2] {
                                                                             ^ [2]


Error ------------------------------------------------------------------------------------------------ tuple-map.js:7:10

Cannot return `arr` because number [1] is incompatible with string [2] in index 0. [incompatible-return]

   tuple-map.js:7:10
   7|   return arr; // error
               ^^^

References:
   tuple-map.js:6:21
   6| function foo2(arr: [number, number]): $TupleMap<[number, number], number => string> {
                          ^^^^^^ [1]
   tuple-map.js:6:77
   6| function foo2(arr: [number, number]): $TupleMap<[number, number], number => string> {
                                                                                  ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ tuple-map.js:7:10

Cannot return `arr` because number [1] is incompatible with string [2] in index 1. [incompatible-return]

   tuple-map.js:7:10
   7|   return arr; // error
               ^^^

References:
   tuple-map.js:6:29
   6| function foo2(arr: [number, number]): $TupleMap<[number, number], number => string> {
                                  ^^^^^^ [1]
   tuple-map.js:6:77
   6| function foo2(arr: [number, number]): $TupleMap<[number, number], number => string> {
                                                                                  ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:2:13

Cannot assign array literal to `b` because array literal [1] has 1 element but tuple type [2] has 0 elements.
[invalid-tuple-arity]

   tuples.js:2:13
   2| var b: [] = [123]; // Error - arity mismatch
                  ^^^^^ [1]

References:
   tuples.js:2:8
   2| var b: [] = [123]; // Error - arity mismatch
             ^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:3:19

Cannot assign array literal to `c` because empty array literal [1] has 0 elements but tuple type [2] has 1 element.
[invalid-tuple-arity]

   tuples.js:3:19
   3| var c: [number] = []; // nope
                        ^^ [1]

References:
   tuples.js:3:8
   3| var c: [number] = []; // nope
             ^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:6:33

Cannot assign array literal to `f` because number [1] is incompatible with string [2] in index 1. [incompatible-type]

   tuples.js:6:33
   6| var f: [number, string] = [123, 456];
                                      ^^^ [1]

References:
   tuples.js:6:17
   6| var f: [number, string] = [123, 456];
                      ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:10:5

Cannot get `t[1]` because tuple type [1] only has 1 element, so index 1 is out of bounds. [invalid-tuple-index]

   tuples.js:10:5
   10|     t[1]; // error, out of bounds
           ^^^^

References:
   tuples.js:9:15
    9|   function(t: [number]) {
                     ^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- tuples.js:11:5

Cannot get `t[-1]` because tuple type [1] only has 1 element, so index -1 is out of bounds. [invalid-tuple-index]

   tuples.js:11:5
   11|     t[-1]; // error, out of bounds
           ^^^^^

References:
   tuples.js:9:15
    9|   function(t: [number]) {
                     ^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- tuples.js:15:7

Cannot get `t[0.5]` because the index into a tuple must be an integer, but `0.5` [1] is not an integer.
[invalid-tuple-index]

   15|     t[0.5]; // error: index out of bounds
             ^^^ [1]


Error --------------------------------------------------------------------------------------------------- tuples.js:16:7

Cannot get `t[0.0000000000000000000001]` because the index into a tuple must be an integer, but `1e-22` [1] is not an
integer. [invalid-tuple-index]

   16|     t[0.0000000000000000000001]; // error: index ("1e-22") out of bounds
             ^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- tuples.js:20:6

Cannot cast `t[1e0]` to boolean because string [1] is incompatible with boolean [2]. [incompatible-cast]

   tuples.js:20:6
   20|     (t[1e0]: boolean); // error: boolean !~> string
            ^^^^^^

References:
   tuples.js:19:24
   19|   function(t: [number, string]) {
                              ^^^^^^ [1]
   tuples.js:20:14
   20|     (t[1e0]: boolean); // error: boolean !~> string
                    ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:21:6

Cannot cast `t[0.9999999999999999999999999999999999999999999]` to boolean because string [1] is incompatible with
boolean [2]. [incompatible-cast]

   tuples.js:21:6
   21|     (t[0.9999999999999999999999999999999999999999999]: boolean); // error: boolean !~> string
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   tuples.js:19:24
   19|   function(t: [number, string]) {
                              ^^^^^^ [1]
   tuples.js:21:56
   21|     (t[0.9999999999999999999999999999999999999999999]: boolean); // error: boolean !~> string
                                                              ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:25:6

Cannot cast `t[56e-13214125]` to boolean because number [1] is incompatible with boolean [2]. [incompatible-cast]

   tuples.js:25:6
   25|     (t[56e-13214125]: boolean); // error: boolean !~> number
            ^^^^^^^^^^^^^^^

References:
   tuples.js:24:16
   24|   function(t: [number, string]) {
                      ^^^^^^ [1]
   tuples.js:25:23
   25|     (t[56e-13214125]: boolean); // error: boolean !~> number
                             ^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:30:7

Cannot get `t[x]` because the index into a tuple must be an integer, but `0.5` [1] is not an integer.
[invalid-tuple-index]

   tuples.js:30:7
   30|     t[x]; // error, not an integer
             ^

References:
   tuples.js:29:15
   29|     const x = 0.5;
                     ^^^ [1]


Error -------------------------------------------------------------------------------------------------- tuples.js:40:44

Cannot return `x.length` because length `2` (number) of tuple [1] is incompatible with string [2]. [incompatible-return]

   tuples.js:40:44
   40|     function a(x: [1, 2]): string { return x.length; }
                                                  ^^^^^^^^

References:
   tuples.js:40:19
   40|     function a(x: [1, 2]): string { return x.length; }
                         ^^^^^^ [1]
   tuples.js:40:28
   40|     function a(x: [1, 2]): string { return x.length; }
                                  ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- tuples.js:46:6

Cannot cast `a_len` to number literal `2` because length `1` (number) of tuple [1] is incompatible with number literal
`2` [2]. [incompatible-cast]

   tuples.js:46:6
   46|     (a_len: 2);
            ^^^^^

References:
   tuples.js:43:16
   43|   function (a: [number]) {
                      ^^^^^^^^ [1]
   tuples.js:46:13
   46|     (a_len: 2);
                   ^ [2]


Error -------------------------------------------------------------------------------------------------- variance.js:5:2

Cannot cast `a` to tuple type because tuple element at index `0` is read-only in `A` [1] but write-only in tuple
type [2]. [incompatible-variance]

   variance.js:5:2
   5| (a: [-foo: string]); // ERROR
       ^

References:
   variance.js:3:16
   3| declare var a: A;
                     ^ [1]
   variance.js:5:5
   5| (a: [-foo: string]); // ERROR
          ^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- variance.js:6:2

Cannot cast `a` to tuple type because tuple element at index `0` is read-only in `A` [1] but writable in tuple type [2].
[incompatible-variance]

   variance.js:6:2
   6| (a: [foo: string]); // ERROR
       ^

References:
   variance.js:3:16
   3| declare var a: A;
                     ^ [1]
   variance.js:6:5
   6| (a: [foo: string]); // ERROR
          ^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- variance.js:8:1

Cannot assign `"s"` to `a[0]` because tuple element at index `0` [1] labeled `foo` is not writable. [cannot-write]

   8| a[0] = "s"; // ERROR - can't write
      ^^^^ [1]


Error ------------------------------------------------------------------------------------------------- variance.js:14:2

Cannot cast `b` to tuple type because tuple element at index `0` is write-only in `B` [1] but read-only in tuple
type [2]. [incompatible-variance]

   variance.js:14:2
   14| (b: [+foo: string]); // ERROR
        ^

References:
   variance.js:12:16
   12| declare var b: B;
                      ^ [1]
   variance.js:14:5
   14| (b: [+foo: string]); // ERROR
           ^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:15:2

Cannot cast `b` to tuple type because tuple element at index `0` is write-only in `B` [1] but readable in tuple
type [2]. [incompatible-variance]

   variance.js:15:2
   15| (b: [foo: string]); // ERROR
        ^

References:
   variance.js:12:16
   12| declare var b: B;
                      ^ [1]
   variance.js:15:5
   15| (b: [foo: string]); // ERROR
           ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:16:2

Cannot get `b[0]` because tuple element at index `0` [1] labeled `foo` is not readable. [cannot-read]

   16| (b[0]: string); // ERROR - can't read
        ^^^^ [1]


Error ------------------------------------------------------------------------------------------------- variance.js:25:2

Cannot cast `c` to tuple type because string [1] is incompatible with undefined [2] in index 0. [incompatible-cast]

   variance.js:25:2
   25| (c: [foo: string | void]); // ERROR
        ^

References:
   variance.js:19:16
   19| type C = [foo: string];
                      ^^^^^^ [1]
   variance.js:25:20
   25| (c: [foo: string | void]); // ERROR
                          ^^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:26:2

Cannot cast `c` to tuple type because undefined [1] is incompatible with string [2] in index 0. [incompatible-cast]

   variance.js:26:2
   26| (c: [-foo: string | void]); // ERROR
        ^

References:
   variance.js:26:21
   26| (c: [-foo: string | void]); // ERROR
                           ^^^^ [1]
   variance.js:19:16
   19| type C = [foo: string];
                      ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:31:2

Cannot cast `d` to tuple type because undefined [1] is incompatible with string [2] in index 0. [incompatible-cast]

   variance.js:31:2
   31| (d: [foo: string]); // ERROR
        ^

References:
   variance.js:30:26
   30| declare var d: [string | void];
                                ^^^^ [1]
   variance.js:31:11
   31| (d: [foo: string]); // ERROR
                 ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:37:2

Cannot cast `m` to `K` because tuple element at index `0` is read-only in tuple type [1] but writable in tuple type [2]
in type argument `T` [3]. [incompatible-variance]

   variance.js:37:2
   37| (m: K<[string]>); // ERROR
        ^

References:
   variance.js:35:18
   35| declare var m: K<[+foo: string]>;
                        ^^^^^^^^^^^^^^ [1]
   variance.js:37:7
   37| (m: K<[string]>); // ERROR
             ^^^^^^^^ [2]
   variance.js:34:17
   34| declare class K<T> {}
                       ^ [3]


Error ------------------------------------------------------------------------------------------------ variance.js:42:15

Cannot call `f` with `n` bound to the first parameter because tuple element at index `0` is read-only in tuple type [1]
but writable in tuple type [2] in array element. [incompatible-variance]

   variance.js:42:15
   42| const res = f(n); // ERROR
                     ^

References:
   variance.js:41:22
   41| declare var n: Array<[+n: number]>;
                            ^^^^^^^^^^^^ [1]
   variance.js:40:29
   40| declare function f<K>(Array<[K]>): K;
                                   ^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:44:2

Cannot cast `res` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   variance.js:44:2
   44| (res: empty); // ERROR
        ^^^

References:
   variance.js:41:27
   41| declare var n: Array<[+n: number]>;
                                 ^^^^^^ [1]
   variance.js:44:7
   44| (res: empty); // ERROR
             ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ variance.js:49:26

Incorrect arguments passed to call of method `assign` because tuple element at index `0` [1] labeled `foo` is not
readable. [cannot-read]

   variance.js:49:26
   49| Object.assign({a: 1}, ...osw); // ERROR - can't read
                                ^^^

References:
   variance.js:48:18
   48| declare var osw: [-foo: {a: number}];
                        ^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- variance.js:55:2

Cannot cast `roc` to tuple type because tuple element at index `0` is read-only in `ROC` [1] but write-only in tuple
type [2]. [incompatible-variance]

   variance.js:55:2
   55| (roc: [-foo: string]); // ERROR
        ^^^

References:
   variance.js:53:18
   53| declare var roc: ROC;
                        ^^^ [1]
   variance.js:55:7
   55| (roc: [-foo: string]); // ERROR
             ^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:56:2

Cannot cast `roc` to tuple type because tuple element at index `0` is read-only in `ROC` [1] but writable in tuple
type [2]. [incompatible-variance]

   variance.js:56:2
   56| (roc: [foo: string]); // ERROR
        ^^^

References:
   variance.js:53:18
   53| declare var roc: ROC;
                        ^^^ [1]
   variance.js:56:7
   56| (roc: [foo: string]); // ERROR
             ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:58:1

Cannot assign `"s"` to `roc[0]` because tuple element at index `0` [1] labeled `foo` is not writable. [cannot-write]

   58| roc[0] = "s"; // ERROR - can't write
       ^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- variance.js:63:2

Cannot cast `rob` to tuple type because tuple element at index `0` is read-only in `ROB` [1] but write-only in tuple
type [2]. [incompatible-variance]

   variance.js:63:2
   63| (rob: [-foo: string]); // ERROR
        ^^^

References:
   variance.js:61:18
   61| declare var rob: ROB;
                        ^^^ [1]
   variance.js:63:7
   63| (rob: [-foo: string]); // ERROR
             ^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:64:2

Cannot cast `rob` to tuple type because tuple element at index `0` is read-only in `ROB` [1] but writable in tuple
type [2]. [incompatible-variance]

   variance.js:64:2
   64| (rob: [foo: string]); // ERROR
        ^^^

References:
   variance.js:61:18
   61| declare var rob: ROB;
                        ^^^ [1]
   variance.js:64:7
   64| (rob: [foo: string]); // ERROR
             ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- variance.js:66:1

Cannot assign `"s"` to `rob[0]` because tuple element at index `0` [1] labeled `foo` is not writable. [cannot-write]

   66| rob[0] = "s"; // ERROR - can't write
       ^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- variance.js:70:1

Cannot assign `"s"` to `u[0]` because tuple element at index `0` [1] is not writable. [cannot-write]

   70| u[0] = "s"; // ERROR - can't write
       ^^^^ [1]


Error ------------------------------------------------------------------------------------------------- variance.js:76:1

Cannot assign `"s"` to `inter[0]` because tuple element at index `0` [1] is not writable. [cannot-write]

   76| inter[0] = "s"; // ERROR - can't write
       ^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ variance.js:80:12

Cannot cast array literal to tuple type because number literal `1` [1] is incompatible with number [2] in index 0.
[incompatible-cast]

   variance.js:80:12
   80| (([1, 2]: [1, 2]): [number, number]); // ERROR
                  ^ [1]

References:
   variance.js:80:21
   80| (([1, 2]: [1, 2]): [number, number]); // ERROR
                           ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ variance.js:80:15

Cannot cast array literal to tuple type because number literal `2` [1] is incompatible with number [2] in index 1.
[incompatible-cast]

   variance.js:80:15
   80| (([1, 2]: [1, 2]): [number, number]); // ERROR
                     ^ [1]

References:
   variance.js:80:29
   80| (([1, 2]: [1, 2]): [number, number]); // ERROR
                                   ^^^^^^ [2]



Found 71 errors
