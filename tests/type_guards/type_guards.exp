Error ---------------------------------------------------------------------------------------------- consistency.js:7:31

Cannot declare a type predicate [1] for function [2] because boolean [1] is incompatible with implicitly-returned
undefined. [incompatible-return]

   consistency.js:7:31
   7| function no_return(x: mixed): x is number {} // error no return
                                    ^^^^^^^^^^^ [1]

References:
   consistency.js:7:1
   7| function no_return(x: mixed): x is number {} // error no return
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- consistency.js:10:12

Cannot return `true` because mixed [1] is incompatible with number [2] in the type inferred for type guard parameter
`x` [3]. [incompatible-return]

   consistency.js:10:12
   10|     return true; // error x: mixed ~> number
                  ^^^^

References:
   consistency.js:9:25
    9| function return_true(x: mixed): x is number {
                               ^^^^^ [1]
   consistency.js:9:38
    9| function return_true(x: mixed): x is number {
                                            ^^^^^^ [2]
   consistency.js:9:33
    9| function return_true(x: mixed): x is number {
                                       ^ [3]


Error --------------------------------------------------------------------------------------------- consistency.js:15:12

Cannot return `true` because mixed [1] is incompatible with number [2] in the type inferred for type guard parameter
`x` [3]. [incompatible-return]

   consistency.js:15:12
   15|     return true; // error in this branch x: mixed ~> number
                  ^^^^

References:
   consistency.js:13:35
   13| function return_true_in_branch(x: mixed): x is number {
                                         ^^^^^ [1]
   consistency.js:13:48
   13| function return_true_in_branch(x: mixed): x is number {
                                                      ^^^^^^ [2]
   consistency.js:13:43
   13| function return_true_in_branch(x: mixed): x is number {
                                                 ^ [3]


Error --------------------------------------------------------------------------------------------- consistency.js:26:10

Cannot return `false` because mixed [1] is incompatible with `A` [2] in the type inferred for type guard parameter
`x` [3]. [incompatible-return]

   consistency.js:26:10
   26|   return false; // error (technically this should hold but that's not what we do in other refinements)
                ^^^^^

References:
   consistency.js:25:32
   25| function always_false_error(x: mixed): x is A {
                                      ^^^^^ [1]
   consistency.js:25:45
   25| function always_false_error(x: mixed): x is A {
                                                   ^ [2]
   consistency.js:25:40
   25| function always_false_error(x: mixed): x is A {
                                              ^ [3]


Error --------------------------------------------------------------------------------------------- consistency.js:31:12

Cannot return `false` because number [1] is incompatible with boolean [2] in the type inferred for type guard parameter
`x` [3]. [incompatible-return]

   consistency.js:31:12
   31|     return false; // error (for the same reason as above)
                  ^^^^^

References:
   consistency.js:29:42
   29| function return_false_under_condition(x: number | string | boolean): x is boolean {
                                                ^^^^^^ [1]
   consistency.js:29:75
   29| function return_false_under_condition(x: number | string | boolean): x is boolean {
                                                                                 ^^^^^^^ [2]
   consistency.js:29:70
   29| function return_false_under_condition(x: number | string | boolean): x is boolean {
                                                                            ^ [3]


Error --------------------------------------------------------------------------------------------- consistency.js:33:12

Cannot return `false` because string [1] is incompatible with boolean [2] in the type inferred for type guard parameter
`x` [3]. [incompatible-return]

   consistency.js:33:12
   33|     return false; // error (for the same reason as above)
                  ^^^^^

References:
   consistency.js:29:51
   29| function return_false_under_condition(x: number | string | boolean): x is boolean {
                                                         ^^^^^^ [1]
   consistency.js:29:75
   29| function return_false_under_condition(x: number | string | boolean): x is boolean {
                                                                                 ^^^^^^^ [2]
   consistency.js:29:70
   29| function return_false_under_condition(x: number | string | boolean): x is boolean {
                                                                            ^ [3]


Error ---------------------------------------------------------------------------------------------- consistency.js:45:3

Cannot return `((typeof x) === 'number') || ((typeof x) === 'string')` because string [1] is incompatible with
number [2] in the type inferred for type guard parameter `x` [3]. [incompatible-return]

   consistency.js:45:3
   45|   typeof x === 'string' // error x: string ~> number
         ^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   consistency.js:43:38
   43| const arrow_error = (x: mixed): x is number => (
                                            ^^^^^^ [2]
   consistency.js:43:33
   43| const arrow_error = (x: mixed): x is number => (
                                       ^ [3]


Error --------------------------------------------------------------------------------------------- consistency.js:50:12

Cannot return `(typeof x) === 'string'` because string [1] is incompatible with number [2] in the type inferred for type
guard parameter `x` [3]. [incompatible-return]

   consistency.js:50:12
   50|     return typeof x === 'string'; // error x: string ~> number
                  ^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   consistency.js:49:21
   49|   m(x: mixed): x is number {
                           ^^^^^^ [2]
   consistency.js:49:16
   49|   m(x: mixed): x is number {
                      ^ [3]


Error --------------------------------------------------------------------------------------------- consistency.js:55:35

Cannot use string [1] as type prediate for parameter `x` because string [1] is incompatible with number [2]. A user
defined type guard needs to be compatible with its parameter's type. [incompatible-type-guard]

   consistency.js:55:35
   55|   const tes1 = (x: ?number): x is string => ( // error on string because string ~/> ?number
                                         ^^^^^^ [1]

References:
   consistency.js:55:21
   55|   const tes1 = (x: ?number): x is string => ( // error on string because string ~/> ?number
                           ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- consistency.js:56:5

Cannot return `x != null` because number [1] is incompatible with string [2] in the type inferred for type guard
parameter `x` [3]. [incompatible-return]

   consistency.js:56:5
   56|     x != null // error number ~> string
           ^^^^^^^^^

References:
   consistency.js:55:21
   55|   const tes1 = (x: ?number): x is string => ( // error on string because string ~/> ?number
                           ^^^^^^ [1]
   consistency.js:55:35
   55|   const tes1 = (x: ?number): x is string => ( // error on string because string ~/> ?number
                                         ^^^^^^ [2]
   consistency.js:55:30
   55|   const tes1 = (x: ?number): x is string => ( // error on string because string ~/> ?number
                                    ^ [3]


Error ---------------------------------------------------------------------------------------------- consistency.js:60:5

Cannot return `x !== null` because null or undefined [1] is incompatible with number [2] in the type inferred for type
guard parameter `x` [3]. [incompatible-return]

   consistency.js:60:5
   60|     x !== null // error null | undefined ~> string
           ^^^^^^^^^^

References:
   consistency.js:59:21
   59|   const test2 = (x: ?number): x is number => (
                           ^^^^^^^ [1]
   consistency.js:59:36
   59|   const test2 = (x: ?number): x is number => (
                                          ^^^^^^ [2]
   consistency.js:59:31
   59|   const test2 = (x: ?number): x is number => (
                                     ^ [3]


Error --------------------------------------------------------------------------------------------- consistency.js:71:24

Cannot use string [1] as type prediate for parameter `x` because string [1] is incompatible with number [2]. A user
defined type guard needs to be compatible with its parameter's type. [incompatible-type-guard]

   consistency.js:71:24
   71|   arr.filter((x): x is string => ( // error on string because string ~/> ?number
                              ^^^^^^ [1]

References:
   consistency.js:69:27
   69|   declare var arr: Array<?number>;
                                 ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- consistency.js:72:5

Cannot return `x != null` because number [1] is incompatible with string [2] in the type inferred for type guard
parameter `x` [3]. [incompatible-return]

   consistency.js:72:5
   72|     x != null // error number ~> string
           ^^^^^^^^^

References:
   consistency.js:69:27
   69|   declare var arr: Array<?number>;
                                 ^^^^^^ [1]
   consistency.js:71:24
   71|   arr.filter((x): x is string => ( // error on string because string ~/> ?number
                              ^^^^^^ [2]
   consistency.js:71:19
   71|   arr.filter((x): x is string => ( // error on string because string ~/> ?number
                         ^ [3]


Error ---------------------------------------------------------------------------------------------- consistency.js:76:5

Cannot return `x !== null` because null or undefined [1] is incompatible with number [2] in the type inferred for type
guard parameter `x` [3]. [incompatible-return]

   consistency.js:76:5
   76|     x !== null // error null | undefined ~> string
           ^^^^^^^^^^

References:
   consistency.js:69:26
   69|   declare var arr: Array<?number>;
                                ^^^^^^^ [1]
   consistency.js:75:24
   75|   arr.filter((x): x is number => (
                              ^^^^^^ [2]
   consistency.js:75:19
   75|   arr.filter((x): x is number => (
                         ^ [3]


Error --------------------------------------------------------------------------------------------- consistency.js:90:23

Cannot return `x instanceof A` because `A` [1] is incompatible with `B` [2] in the type inferred for type guard
parameter `x` [3]. [incompatible-return]

   consistency.js:90:23
   90|   return x instanceof A; // error A ~> B
                             ^ [1]

References:
   consistency.js:89:43
   89| function instanceof_error(x: mixed): x is B {
                                                 ^ [2]
   consistency.js:89:38
   89| function instanceof_error(x: mixed): x is B {
                                            ^ [3]


Error -------------------------------------------------------------------------------------------- consistency.js:116:10

Cannot return `Array.isArray(...)` because array element of refined mixed [1] is incompatible with `A` [2] in array
element of the type inferred for type guard parameter `x` [3]. [incompatible-return]

   consistency.js:116:10
   116|   return Array.isArray(x);
                 ^^^^^^^^^^^^^^^^

References:
   consistency.js:115:36
   115| function is_array_poly_error<A>(x: mixed): x is $ReadOnlyArray<A> { // error ROArray<mixed> ~> ROArray<A>
                                           ^^^^^ [1]
   consistency.js:115:64
   115| function is_array_poly_error<A>(x: mixed): x is $ReadOnlyArray<A> { // error ROArray<mixed> ~> ROArray<A>
                                                                       ^ [2]
   consistency.js:115:44
   115| function is_array_poly_error<A>(x: mixed): x is $ReadOnlyArray<A> { // error ROArray<mixed> ~> ROArray<A>
                                                   ^ [3]


Error -------------------------------------------------------------------------------------------- consistency.js:129:12

Cannot return `isNumberOrString(...) && isBoolean(...)` because in the type inferred for type guard parameter `x` [1]:
[incompatible-return]
 - Either boolean [2] is incompatible with string [3].
 - Or number [4] is incompatible with string [3].

   consistency.js:129:12
   129|     return isNumberOrString(x) && isBoolean(x); // error. For now this check is equivalent to: (number | string) & boolean ~> string
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   consistency.js:128:29
   128|   function error(x: mixed): x is string {
                                    ^ [1]
   consistency.js:122:46
   122|   declare function isBoolean(x: mixed): x is boolean;
                                                     ^^^^^^^ [2]
   consistency.js:128:34
   128|   function error(x: mixed): x is string {
                                         ^^^^^^ [3]
   consistency.js:120:54
   120|   declare function isNumberOrString(x: mixed): x is (number | string);
                                                             ^^^^^^ [4]


Error -------------------------------------------------------------------------------------------- consistency.js:140:10

Cannot use type guard parameter `x` [1] because at this return point it is writen to in [2]. [function-predicate]

   consistency.js:140:10
   140|   return x instanceof A; // error 'x' is written to
                 ^^^^^^^^^^^^^^

References:
   consistency.js:138:55
   138| function error_write_to_type_guard_param_1(x: mixed): x is A {
                                                              ^ [1]
   consistency.js:139:3
   139|   x = 1;
          ^ [2]


Error -------------------------------------------------------------------------------------------- consistency.js:145:10

Cannot use type guard parameter `x` [1] because at this return point it is writen to in [2]. [function-predicate]

   consistency.js:145:10
   145|   return x instanceof B; // error 'x' is written to
                 ^^^^^^^^^^^^^^

References:
   consistency.js:143:55
   143| function error_write_to_type_guard_param_2(x: mixed): x is B {
                                                              ^ [1]
   consistency.js:144:3
   144|   x = new B();
          ^ [2]


Error -------------------------------------------------------------------------------------------- consistency.js:151:12

Cannot use type guard parameter `x` [1] because at this return point it is writen to in [2]. [function-predicate]

   consistency.js:151:12
   151|     return x instanceof B; // error 'x' is written to (1st loc)
                   ^^^^^^^^^^^^^^

References:
   consistency.js:148:59
   148| function error_write_to_type_guard_param_multi(x: mixed): x is B {
                                                                  ^ [1]
   consistency.js:150:5
   150|     x = new B();
            ^ [2]


Error -------------------------------------------------------------------------------------------- consistency.js:154:12

Cannot use type guard parameter `x` [1] because at this return point it is writen to in [2]. [function-predicate]

   consistency.js:154:12
   154|     return x instanceof B; // error 'x' is written to (2nd loc)
                   ^^^^^^^^^^^^^^

References:
   consistency.js:148:59
   148| function error_write_to_type_guard_param_multi(x: mixed): x is B {
                                                                  ^ [1]
   consistency.js:153:5
   153|     x = new B();
            ^ [2]


Error -------------------------------------------------------------------------------------------- consistency.js:167:25

Cannot return `x instanceof A` because `A` [1] is incompatible with `B` [2] in the type inferred for type guard
parameter `x` [3]. [incompatible-return]

   consistency.js:167:25
   167|     return x instanceof A; // error A ~> B
                                ^ [1]

References:
   consistency.js:165:56
   165| function multi_return_one_branch_error(x: mixed): x is B {
                                                               ^ [2]
   consistency.js:165:51
   165| function multi_return_one_branch_error(x: mixed): x is B {
                                                          ^ [3]


Error -------------------------------------------------------------------------------------------- consistency.js:176:33

Cannot use type guard parameter `x`, because `x` [1] is reassigned in [2]. [function-predicate]

   consistency.js:176:33
   176| function havoc_error(x: mixed): x is B { // error 'x' is havoced
                                        ^

References:
   consistency.js:176:22
   176| function havoc_error(x: mixed): x is B { // error 'x' is havoced
                             ^ [1]
   consistency.js:180:3
   180|   y();
          ^^^ [2]


Error -------------------------------------------------------------------------------------------------- invalid.js:9:12

Cannot find type guard parameter `this` [1] in the parameters of this function (type). [function-predicate]

   9|   get p(): this is C {  // TODO error no type guard on getter
                 ^^^^ [1]


Error ------------------------------------------------------------------------------------------------- invalid.js:17:31

Cannot declare a type predicate [1] for function [2] because boolean [1] is incompatible with implicitly-returned
undefined. [incompatible-return]

   invalid.js:17:31
   17| function no_return(x: mixed): x is number {}
                                     ^^^^^^^^^^^ [1]

References:
   invalid.js:17:1
   17| function no_return(x: mixed): x is number {}
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- patterns_and_rest.js:1:54

A type guard parameter `b` [1] cannot reference pattern parameter `b` [2]. [function-predicate]

   patterns_and_rest.js:1:54
   1| function invalid_pattern_object({a: b}: {a: mixed}): b is string {
                                                           ^ [1]

References:
   patterns_and_rest.js:1:37
   1| function invalid_pattern_object({a: b}: {a: mixed}): b is string {
                                          ^ [2]


Error ---------------------------------------------------------------------------------------- patterns_and_rest.js:5:47

A type guard parameter `b` [1] cannot reference pattern parameter `b` [2]. [function-predicate]

   patterns_and_rest.js:5:47
   5| function invalid_pattern_array([b]: [mixed]): b is string {
                                                    ^ [1]

References:
   patterns_and_rest.js:5:33
   5| function invalid_pattern_array([b]: [mixed]): b is string {
                                      ^ [2]


Error ---------------------------------------------------------------------------------------- patterns_and_rest.js:9:44

A type guard parameter `a` [1] cannot reference rest parameter `a` [2]. [function-predicate]

   patterns_and_rest.js:9:44
   9| function invalid_rest(...a: Array<mixed>): a is string {
                                                 ^ [1]

References:
   patterns_and_rest.js:9:26
   9| function invalid_rest(...a: Array<mixed>): a is string {
                               ^ [2]


Error --------------------------------------------------------------------------------------- patterns_and_rest.js:13:57

A type guard parameter `a` [1] cannot reference rest parameter `a` [2]. [function-predicate]

   patterns_and_rest.js:13:57
   13| declare function invalid_rest_decl(...a: Array<mixed>): a is string;  // error a is in rest param
                                                               ^ [1]

References:
   patterns_and_rest.js:13:39
   13| declare function invalid_rest_decl(...a: Array<mixed>): a is string;  // error a is in rest param
                                             ^ [2]


Error --------------------------------------------------------------------------------------- patterns_and_rest.js:15:60

A type guard parameter `b` [1] cannot reference pattern parameter `b` [2]. [function-predicate]

   patterns_and_rest.js:15:60
   15| function invalid_pattern_compound({a: [b]}: {a: [mixed]}): b is string {
                                                                  ^ [1]

References:
   patterns_and_rest.js:15:40
   15| function invalid_pattern_compound({a: [b]}: {a: [mixed]}): b is string {
                                              ^ [2]


Error ---------------------------------------------------------------------------------------- patterns_and_rest.js:28:4

Cannot cast `x` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   patterns_and_rest.js:28:4
   28|   (x: number); // TODO error string ~> number
          ^

References:
   patterns_and_rest.js:21:78
   21| function valid_pattern({a}: {a: mixed}, x: mixed, ...r: Array<number>): x is string {
                                                                                    ^^^^^^ [1]
   patterns_and_rest.js:28:7
   28|   (x: number); // TODO error string ~> number
             ^^^^^^ [2]


Error --------------------------------------------------------------------------------------- patterns_and_rest.js:31:44

A type guard parameter `p` [1] cannot reference rest parameter `p` [2]. [function-predicate]

   patterns_and_rest.js:31:44
   31| type F = (x: mixed, ...p: Array<mixed>) => p is number; // error p is in rest param
                                                  ^ [1]

References:
   patterns_and_rest.js:31:24
   31| type F = (x: mixed, ...p: Array<mixed>) => p is number; // error p is in rest param
                              ^ [2]


Error ------------------------------------------------------------------------------------------------ refinement.js:7:6

Cannot cast `y` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   refinement.js:7:6
   7|     (y: string); // error number ~> string
           ^

References:
   refinement.js:2:26
   2|   fn: (x: mixed) => x is number,
                               ^^^^^^ [1]
   refinement.js:7:9
   7|     (y: string); // error number ~> string
              ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- refinement.js:20:6

Cannot cast `x1` to number because: [incompatible-cast]
 - Either string [1] is incompatible with number [2].
 - Or string [1] is incompatible with number [2].

   refinement.js:20:6
   20|     (x1: number); // error string ~> number
            ^^

References:
   refinement.js:13:7
   13|   x1: string,
             ^^^^^^ [1]
   refinement.js:20:10
   20|     (x1: number); // error string ~> number
                ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- refinement.js:24:6

Cannot cast `x2` to number because: [incompatible-cast]
 - Either string [1] is incompatible with number [2].
 - Or string [1] is incompatible with number [2].

   refinement.js:24:6
   24|     (x2: number); // error string ~> number
            ^^

References:
   refinement.js:14:7
   14|   x2: string | null,
             ^^^^^^ [1]
   refinement.js:24:10
   24|     (x2: number); // error string ~> number
                ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- refinement.js:24:6

Cannot cast `x2` to number because: [incompatible-cast]
 - Either string [1] is incompatible with number [2].
 - Or null [3] is incompatible with number [2].

   refinement.js:24:6
   24|     (x2: number); // error string ~> number
            ^^

References:
   refinement.js:14:7
   14|   x2: string | null,
             ^^^^^^ [1]
   refinement.js:24:10
   24|     (x2: number); // error string ~> number
                ^^^^^^ [2]
   refinement.js:14:16
   14|   x2: string | null,
                      ^^^^ [3]


Error ----------------------------------------------------------------------------------------------- refinement.js:28:6

Cannot cast `x3` to number because: [incompatible-cast]
 - Either string [1] is incompatible with number [2].
 - Or string [1] is incompatible with number [2].

   refinement.js:28:6
   28|     (x3: number); // error string ~> number
            ^^

References:
   refinement.js:15:7
   15|   x3: string | void,
             ^^^^^^ [1]
   refinement.js:28:10
   28|     (x3: number); // error string ~> number
                ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- refinement.js:28:6

Cannot cast `x3` to number because: [incompatible-cast]
 - Either string [1] is incompatible with number [2].
 - Or undefined [3] is incompatible with number [2].

   refinement.js:28:6
   28|     (x3: number); // error string ~> number
            ^^

References:
   refinement.js:15:7
   15|   x3: string | void,
             ^^^^^^ [1]
   refinement.js:28:10
   28|     (x3: number); // error string ~> number
                ^^^^^^ [2]
   refinement.js:15:16
   15|   x3: string | void,
                      ^^^^ [3]


Error ----------------------------------------------------------------------------------------------- refinement.js:32:6

Cannot cast `x4` to number because: [incompatible-cast]
 - Either string [1] is incompatible with number [2].
 - Or null or undefined [3] is incompatible with number [2].

   refinement.js:32:6
   32|     (x4: number); // error string ~> number
            ^^

References:
   refinement.js:16:8
   16|   x4: ?string,
              ^^^^^^ [1]
   refinement.js:32:10
   32|     (x4: number); // error string ~> number
                ^^^^^^ [2]
   refinement.js:16:7
   16|   x4: ?string,
             ^^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------- refinement.js:32:6

Cannot cast `x4` to number because: [incompatible-cast]
 - Either string [1] is incompatible with number [2].
 - Or string [1] is incompatible with number [2].

   refinement.js:32:6
   32|     (x4: number); // error string ~> number
            ^^

References:
   refinement.js:16:8
   16|   x4: ?string,
              ^^^^^^ [1]
   refinement.js:32:10
   32|     (x4: number); // error string ~> number
                ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- refinement.js:47:35

Cannot call `arr.filter` because: [incompatible-call]
 - Either number [1] is incompatible with string [2] in the type predicate.
 - Or property `name` is missing in function [3] but exists in statics of `Boolean` [4].

   refinement.js:47:35
    47|   const arr2: Array<string> = arr.filter((x: mixed): x is number => { return typeof x === "number"; }); // error
                                          ^^^^^^

References:
   refinement.js:47:59
    47|   const arr2: Array<string> = arr.filter((x: mixed): x is number => { return typeof x === "number"; }); // error
                                                                  ^^^^^^ [1]
   refinement.js:47:21
    47|   const arr2: Array<string> = arr.filter((x: mixed): x is number => { return typeof x === "number"; }); // error
                            ^^^^^^ [2]
   refinement.js:47:42
    47|   const arr2: Array<string> = arr.filter((x: mixed): x is number => { return typeof x === "number"; }); // error
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]
   <BUILTINS>/core.js:367:15
   367| declare class Boolean {
                      ^^^^^^^ [4]


Error ---------------------------------------------------------------------------------------------- refinement.js:48:35

Cannot call `arr.filter` because: [incompatible-call]
 - Either property `name` is missing in function [1] but exists in statics of `Boolean` [2].
 - Or function [1], a non-predicate function, is incompatible with function type [3], which is a predicate function.

   refinement.js:48:35
    48|   const arr3: Array<string> = arr.filter((x: mixed) => { return typeof x === "number"; }); // error no refinement
                                          ^^^^^^

References:
   refinement.js:48:42
    48|   const arr3: Array<string> = arr.filter((x: mixed) => { return typeof x === "number"; }); // error no refinement
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   <BUILTINS>/core.js:367:15
   367| declare class Boolean {
                      ^^^^^^^ [2]
   refinement.js:40:35
    40|     filter<This, S: T>(predicate: (this: This, value: T, index: number, array: $ReadOnlyArray<T>) => value is S, thisArg?: This): Array<S>;
                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error --------------------------------------------------------------------------------------------------- subst.js:10:15

Cannot assign `funA(...)` to `x2` because `A` [1] is incompatible with `B` [2]. [incompatible-type]

   subst.js:10:15
   10| const x2: B = funA(isA); // error A ~> B
                     ^^^^^^^^^

References:
   subst.js:4:38
    4| declare function isA(x: mixed): x is A;
                                            ^ [1]
   subst.js:10:11
   10| const x2: B = funA(isA); // error A ~> B
                 ^ [2]


Error ---------------------------------------------------------------------------------------------------- subst.js:15:4

Cannot cast `input` to `B` because `A` [1] is incompatible with `B` [2]. [incompatible-cast]

   subst.js:15:4
   15|   (input: B); // error A ~> B
          ^^^^^

References:
   subst.js:4:38
    4| declare function isA(x: mixed): x is A;
                                            ^ [1]
   subst.js:15:11
   15|   (input: B); // error A ~> B
                 ^ [2]


Error ------------------------------------------------------------------------------------------------ subtyping.js:6:10

Cannot return `f` because type guard parameter `x` [1] does not appear in the same position as type guard parameter
`x` [2] in the type predicate. [function-predicate]

   subtyping.js:6:10
   6|   return f; // error 'x' is not in the same position as 'y'
               ^

References:
   subtyping.js:5:56
   5| function non_matching_prams(f: (x: mixed, y: mixed) => x is number): (y: mixed, x: mixed) => x is number {
                                                             ^ [1]
   subtyping.js:5:94
   5| function non_matching_prams(f: (x: mixed, y: mixed) => x is number): (y: mixed, x: mixed) => x is number {
                                                                                                   ^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:10:10

Cannot return `f` because function type [1], a non-predicate function, is incompatible with function type [2], which is
a predicate function. [function-predicate]

   subtyping.js:10:10
   10|   return f; // error non type predicate
                ^

References:
   subtyping.js:9:42
    9| function non_type_guard_to_type_guard(f: (x: mixed) => boolean): (x: mixed) => x is number {
                                                ^^^^^^^^^^^^^^^^^^^^^ [1]
   subtyping.js:9:66
    9| function non_type_guard_to_type_guard(f: (x: mixed) => boolean): (x: mixed) => x is number {
                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:15:10

Cannot return `f` because function [1], a non-predicate function, is incompatible with function type [2], which is a
predicate function. [function-predicate]

   subtyping.js:15:10
   15|   return f; // error pred based to type guard based
                ^

References:
   subtyping.js:14:3
   14|   declare function f(x: mixed): boolean %checks(typeof x === "number");
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   subtyping.js:13:38
   13| function pred_based_to_type_guard(): (x: mixed) => x is number {
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ subtyping.js:20:4

Cannot cast `g` to `typeof f` because function type [1], a non-predicate function, is incompatible with function [2],
which is a predicate function. [function-predicate]

   subtyping.js:20:4
   20|   (g: typeof f); // error type guard based to pred based
          ^

References:
   subtyping.js:18:38
   18| function type_guard_to_pred_based(g: (x: mixed) => x is number): void {
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   subtyping.js:20:7
   20|   (g: typeof f); // error type guard based to pred based
             ^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:38:10

Cannot return `f` because `A` [1] is incompatible with `B` [2] in the type predicate. [incompatible-return]

   subtyping.js:38:10
   38|   return f; // error A ~> B
                ^

References:
   subtyping.js:37:61
   37| function type_guard_subtyping_error_1(f: (x: mixed) => x is A): (x: mixed) => x is B {
                                                                   ^ [1]
   subtyping.js:37:84
   37| function type_guard_subtyping_error_1(f: (x: mixed) => x is A): (x: mixed) => x is B {
                                                                                          ^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:42:10

Cannot return `f` because `A` [1] is incompatible with `C` [2] in the type predicate. [incompatible-return]

   subtyping.js:42:10
   42|   return f; // error A ~> C
                ^

References:
   subtyping.js:41:61
   41| function type_guard_subtyping_error_2(f: (x: mixed) => x is A): (x: mixed) => x is C {
                                                                   ^ [1]
   subtyping.js:41:84
   41| function type_guard_subtyping_error_2(f: (x: mixed) => x is A): (x: mixed) => x is C {
                                                                                          ^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:46:10

Cannot return `f` because read-only array type [1] is incompatible with array type [2] in the type predicate.
[incompatible-return]

   subtyping.js:46:10
   46|   return f; // error
                ^

References:
   subtyping.js:45:64
   45| function type_guard_subtyping_error_3(f: <A>(x: mixed) => x is $ReadOnlyArray<A>): <B>(x: mixed) => x is Array<B> {
                                                                      ^^^^^^^^^^^^^^^^^ [1]
   subtyping.js:45:106
   45| function type_guard_subtyping_error_3(f: <A>(x: mixed) => x is $ReadOnlyArray<A>): <B>(x: mixed) => x is Array<B> {
                                                                                                                ^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:56:10

Cannot return `f` because `A` [1] is incompatible with `C` [2] in the type predicate of array element. Arrays are
invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-an-arraystring-to-a-function-that-takes-an-arraystring-number.
[incompatible-return]

   subtyping.js:56:10
   56|   return f; // error C ~ A
                ^

References:
   subtyping.js:55:92
   55| function type_guard_unif_error_1(f: Array<(x: mixed) => x is C>): Array<(x: mixed) => x is A> {
                                                                                                  ^ [1]
   subtyping.js:55:62
   55| function type_guard_unif_error_1(f: Array<(x: mixed) => x is C>): Array<(x: mixed) => x is A> {
                                                                    ^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:60:10

Cannot return `f` because `A` [1] is incompatible with `B` [2] in the type predicate of array element.
[incompatible-return]

   subtyping.js:60:10
   60|   return f; // errors A ~> B, B ~> A
                ^

References:
   subtyping.js:59:62
   59| function type_guard_unif_error_2(f: Array<(x: mixed) => x is A>): Array<(x: mixed) => x is B> {
                                                                    ^ [1]
   subtyping.js:59:92
   59| function type_guard_unif_error_2(f: Array<(x: mixed) => x is A>): Array<(x: mixed) => x is B> {
                                                                                                  ^ [2]


Error ----------------------------------------------------------------------------------------------- subtyping.js:64:10

Cannot return `f` because `A` [1] is incompatible with `C` [2] in the type predicate of array element.
[incompatible-return]

   subtyping.js:64:10
   64|   return f; // error A ~> C
                ^

References:
   subtyping.js:63:62
   63| function type_guard_unif_error_3(f: Array<(x: mixed) => x is A>): Array<(x: mixed) => x is C> {
                                                                    ^ [1]
   subtyping.js:63:92
   63| function type_guard_unif_error_3(f: Array<(x: mixed) => x is A>): Array<(x: mixed) => x is C> {
                                                                                                  ^ [2]


Error -------------------------------------------------------------------------------- type_guard_compatibility.js:15:30

Cannot use `B` [1] as type prediate for parameter `x` because `B` [1] is incompatible with `A` [2]. A user defined type
guard needs to be compatible with its parameter's type. [incompatible-type-guard]

   type_guard_compatibility.js:15:30
   15| function error_1(x: A): x is B { // error B ~> A
                                    ^ [1]

References:
   type_guard_compatibility.js:15:21
   15| function error_1(x: A): x is B { // error B ~> A
                           ^ [2]


Error -------------------------------------------------------------------------------- type_guard_compatibility.js:19:59

Cannot use array type [1] as type prediate for parameter `x` because mixed [2] is incompatible with `X` [3] in array
element. A user defined type guard needs to be compatible with its parameter's type. [incompatible-type-guard]

   type_guard_compatibility.js:19:59
   19| declare function error_poly_1<X>(x: Array<X>): x is Array<mixed>; // error mixed ~> X
                                                                 ^^^^^ [2]

References:
   type_guard_compatibility.js:19:53
   19| declare function error_poly_1<X>(x: Array<X>): x is Array<mixed>; // error mixed ~> X
                                                           ^^^^^^^^^^^^ [1]
   type_guard_compatibility.js:19:43
   19| declare function error_poly_1<X>(x: Array<X>): x is Array<mixed>; // error mixed ~> X
                                                 ^ [3]


Error -------------------------------------------------------------------------------- type_guard_compatibility.js:27:33

Cannot use `B` [1] as type prediate for parameter `x` because `B` [1] is incompatible with `A` [2]. A user defined type
guard needs to be compatible with its parameter's type. [incompatible-type-guard]

   type_guard_compatibility.js:27:33
   27| type F_error_1 = (x: A) => x is B; // error B ~> A
                                       ^ [1]

References:
   type_guard_compatibility.js:27:22
   27| type F_error_1 = (x: A) => x is B; // error B ~> A
                            ^ [2]


Error -------------------------------------------------------------------------------- type_guard_compatibility.js:29:54

Cannot use array type [1] as type prediate for parameter `x` because mixed [2] is incompatible with `X` [3] in array
element. A user defined type guard needs to be compatible with its parameter's type. [incompatible-type-guard]

   type_guard_compatibility.js:29:54
   29| type F_error_poly_1 = <X>(x: Array<X>) => x is Array<mixed>; // error mixed ~> X
                                                            ^^^^^ [2]

References:
   type_guard_compatibility.js:29:48
   29| type F_error_poly_1 = <X>(x: Array<X>) => x is Array<mixed>; // error mixed ~> X
                                                      ^^^^^^^^^^^^ [1]
   type_guard_compatibility.js:29:36
   29| type F_error_poly_1 = <X>(x: Array<X>) => x is Array<mixed>; // error mixed ~> X
                                          ^ [3]


Error -------------------------------------------------------------------------------- type_guard_compatibility.js:30:54

Cannot use array type [1] as type prediate for parameter `x` because mixed [2] is incompatible with `X` [3] in array
element. A user defined type guard needs to be compatible with its parameter's type. [incompatible-type-guard]

   type_guard_compatibility.js:30:54
   30| type F_error_poly_2<X> = (x: Array<X>) => x is Array<mixed>; // error mixed ~> X
                                                            ^^^^^ [2]

References:
   type_guard_compatibility.js:30:48
   30| type F_error_poly_2<X> = (x: Array<X>) => x is Array<mixed>; // error mixed ~> X
                                                      ^^^^^^^^^^^^ [1]
   type_guard_compatibility.js:30:36
   30| type F_error_poly_2<X> = (x: Array<X>) => x is Array<mixed>; // error mixed ~> X
                                          ^ [3]


Error -------------------------------------------------------------------------------------------------- unbound.js:1:23

Cannot find type guard parameter `x` [1] in the parameters of this function (type). [function-predicate]

   1| function no_params(): x is number { // error x unbound
                            ^ [1]


Error -------------------------------------------------------------------------------------------------- unbound.js:5:47

Cannot find type guard parameter `y` [1] in the parameters of this function (type). [function-predicate]

   5| function unbound_type_guard_param(x: number): y is number {  // error y is not a param
                                                    ^ [1]


Error -------------------------------------------------------------------------------------------------- unbound.js:9:23

Cannot find type guard parameter `x` [1] in the parameters of this function (type). [function-predicate]

   9| type No_param = () => x is number; // error x unbound
                            ^ [1]


Error ------------------------------------------------------------------------------------------------- unbound.js:11:37

Cannot find type guard parameter `x` [1] in the parameters of this function (type). [function-predicate]

   11| type Unbound_param = (y: number) => x is number; // error x unbound
                                           ^ [1]


Error ------------------------------------------------------------------------------------------------- unbound.js:13:34

Cannot find type guard parameter `x` [1] in the parameters of this function (type). [function-predicate]

   13| type No_param_name = (number) => x is number; // error x unbound
                                        ^ [1]



Found 64 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
